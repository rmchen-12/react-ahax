import{Component as t,Children as e,createElement as n}from"react";var r=function(t){return"object"==typeof t?null!==t:"function"==typeof t},o=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t},i=function(t){try{return!!t()}catch(t){return!0}},c=!i((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}));function u(t,e){return t(e={exports:{}},e.exports),e.exports}var f=u((function(t){var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)})),s=f.document,a=r(s)&&r(s.createElement),p=function(t){return a?s.createElement(t):{}},l=!c&&!i((function(){return 7!=Object.defineProperty(p("div"),"a",{get:function(){return 7}}).a})),y=function(t,e){if(!r(t))return t;var n,o;if(e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;if("function"==typeof(n=t.valueOf)&&!r(o=n.call(t)))return o;if(!e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;throw TypeError("Can't convert object to primitive value")},h=Object.defineProperty,v={f:c?Object.defineProperty:function(t,e,n){if(o(t),e=y(e,!0),o(n),l)try{return h(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},m=v.f,b=Function.prototype,d=/^\s*function ([^ (]*)/;"name"in b||c&&m(b,"name",{configurable:!0,get:function(){try{return(""+this).match(d)[1]}catch(t){return""}}});var g=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")};function O(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var S=function(t,e,n){return e&&O(t.prototype,e),n&&O(t,n),t},w=u((function(t){function e(n){return"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?t.exports=e=function(t){return typeof t}:t.exports=e=function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},e(n)}t.exports=e}));var j=function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t};var _=function(t,e){return!e||"object"!==w(e)&&"function"!=typeof e?j(t):e},P=u((function(t){function e(n){return t.exports=e=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},e(n)}t.exports=e})),x=u((function(t){function e(n,r){return t.exports=e=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},e(n,r)}t.exports=e}));var E=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&x(t,e)},T=u((function(t){var e=t.exports={version:"2.6.11"};"number"==typeof __e&&(__e=e)})),C=(T.version,u((function(t){var e=f["__core-js_shared__"]||(f["__core-js_shared__"]={});(t.exports=function(t,n){return e[t]||(e[t]=void 0!==n?n:{})})("versions",[]).push({version:T.version,mode:"global",copyright:"Â© 2019 Denis Pushkarev (zloirock.ru)"})}))),k=0,M=Math.random(),L=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++k+M).toString(36))},F=u((function(t){var e=C("wks"),n=f.Symbol,r="function"==typeof n;(t.exports=function(t){return e[t]||(e[t]=r&&n[t]||(r?n:L)("Symbol."+t))}).store=e})),A={f:F},N=v.f,$=function(t){var e=T.Symbol||(T.Symbol=f.Symbol||{});"_"==t.charAt(0)||t in e||N(e,t,{value:A.f(t)})};$("asyncIterator");var R={}.hasOwnProperty,I=function(t,e){return R.call(t,e)},D=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}},W=c?function(t,e,n){return v.f(t,e,D(1,n))}:function(t,e,n){return t[e]=n,t},z=C("native-function-to-string",Function.toString),U=u((function(t){var e=L("src"),n=(""+z).split("toString");T.inspectSource=function(t){return z.call(t)},(t.exports=function(t,r,o,i){var c="function"==typeof o;c&&(I(o,"name")||W(o,"name",r)),t[r]!==o&&(c&&(I(o,e)||W(o,e,t[r]?""+t[r]:n.join(String(r)))),t===f?t[r]=o:i?t[r]?t[r]=o:W(t,r,o):(delete t[r],W(t,r,o)))})(Function.prototype,"toString",(function(){return"function"==typeof this&&this[e]||z.call(this)}))})),V=function(t,e,n){if(function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!")}(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}},G=function(t,e,n){var r,o,i,c,u=t&G.F,s=t&G.G,a=t&G.S,p=t&G.P,l=t&G.B,y=s?f:a?f[e]||(f[e]={}):(f[e]||{}).prototype,h=s?T:T[e]||(T[e]={}),v=h.prototype||(h.prototype={});for(r in s&&(n=e),n)i=((o=!u&&y&&void 0!==y[r])?y:n)[r],c=l&&o?V(i,f):p&&"function"==typeof i?V(Function.call,i):i,y&&U(y,r,i,t&G.U),h[r]!=i&&W(h,r,c),p&&v[r]!=i&&(v[r]=i)};f.core=T,G.F=1,G.G=2,G.S=4,G.P=8,G.B=16,G.W=32,G.U=64,G.R=128;var q,H=G,K=u((function(t){var e=L("meta"),n=v.f,o=0,c=Object.isExtensible||function(){return!0},u=!i((function(){return c(Object.preventExtensions({}))})),f=function(t){n(t,e,{value:{i:"O"+ ++o,w:{}}})},s=t.exports={KEY:e,NEED:!1,fastKey:function(t,n){if(!r(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!I(t,e)){if(!c(t))return"F";if(!n)return"E";f(t)}return t[e].i},getWeak:function(t,n){if(!I(t,e)){if(!c(t))return!0;if(!n)return!1;f(t)}return t[e].w},onFreeze:function(t){return u&&s.NEED&&c(t)&&!I(t,e)&&f(t),t}}})),B=(K.KEY,K.NEED,K.fastKey,K.getWeak,K.onFreeze,v.f),J=F("toStringTag"),Y=function(t,e,n){t&&!I(t=n?t:t.prototype,J)&&B(t,J,{configurable:!0,value:e})},Q={}.toString,X=function(t){return Q.call(t).slice(8,-1)},Z=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==X(t)?t.split(""):Object(t)},tt=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t},et=function(t){return Z(tt(t))},nt=Math.ceil,rt=Math.floor,ot=function(t){return isNaN(t=+t)?0:(t>0?rt:nt)(t)},it=Math.min,ct=Math.max,ut=Math.min,ft=C("keys"),st=function(t){return ft[t]||(ft[t]=L(t))},at=(q=!1,function(t,e,n){var r,o,i=et(t),c=(r=i.length)>0?it(ot(r),9007199254740991):0,u=function(t,e){return(t=ot(t))<0?ct(t+e,0):ut(t,e)}(n,c);if(q&&e!=e){for(;c>u;)if((o=i[u++])!=o)return!0}else for(;c>u;u++)if((q||u in i)&&i[u]===e)return q||u||0;return!q&&-1}),pt=st("IE_PROTO"),lt=function(t,e){var n,r=et(t),o=0,i=[];for(n in r)n!=pt&&I(r,n)&&i.push(n);for(;e.length>o;)I(r,n=e[o++])&&(~at(i,n)||i.push(n));return i},yt="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(","),ht=Object.keys||function(t){return lt(t,yt)},vt={f:Object.getOwnPropertySymbols},mt={f:{}.propertyIsEnumerable},bt=Array.isArray||function(t){return"Array"==X(t)},dt=function(t){return Object(tt(t))},gt=c?Object.defineProperties:function(t,e){o(t);for(var n,r=ht(e),i=r.length,c=0;i>c;)v.f(t,n=r[c++],e[n]);return t},Ot=f.document,St=Ot&&Ot.documentElement,wt=st("IE_PROTO"),jt=function(){},_t=function(){var t,e=p("iframe"),n=yt.length;for(e.style.display="none",St.appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),_t=t.F;n--;)delete _t.prototype[yt[n]];return _t()},Pt=Object.create||function(t,e){var n;return null!==t?(jt.prototype=o(t),n=new jt,jt.prototype=null,n[wt]=t):n=_t(),void 0===e?n:gt(n,e)},xt=yt.concat("length","prototype"),Et={f:Object.getOwnPropertyNames||function(t){return lt(t,xt)}},Tt=Et.f,Ct={}.toString,kt="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],Mt={f:function(t){return kt&&"[object Window]"==Ct.call(t)?function(t){try{return Tt(t)}catch(t){return kt.slice()}}(t):Tt(et(t))}},Lt=Object.getOwnPropertyDescriptor,Ft={f:c?Lt:function(t,e){if(t=et(t),e=y(e,!0),l)try{return Lt(t,e)}catch(t){}if(I(t,e))return D(!mt.f.call(t,e),t[e])}},At=K.KEY,Nt=Ft.f,$t=v.f,Rt=Mt.f,It=f.Symbol,Dt=f.JSON,Wt=Dt&&Dt.stringify,zt=F("_hidden"),Ut=F("toPrimitive"),Vt={}.propertyIsEnumerable,Gt=C("symbol-registry"),qt=C("symbols"),Ht=C("op-symbols"),Kt=Object.prototype,Bt="function"==typeof It&&!!vt.f,Jt=f.QObject,Yt=!Jt||!Jt.prototype||!Jt.prototype.findChild,Qt=c&&i((function(){return 7!=Pt($t({},"a",{get:function(){return $t(this,"a",{value:7}).a}})).a}))?function(t,e,n){var r=Nt(Kt,e);r&&delete Kt[e],$t(t,e,n),r&&t!==Kt&&$t(Kt,e,r)}:$t,Xt=function(t){var e=qt[t]=Pt(It.prototype);return e._k=t,e},Zt=Bt&&"symbol"==typeof It.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof It},te=function(t,e,n){return t===Kt&&te(Ht,e,n),o(t),e=y(e,!0),o(n),I(qt,e)?(n.enumerable?(I(t,zt)&&t[zt][e]&&(t[zt][e]=!1),n=Pt(n,{enumerable:D(0,!1)})):(I(t,zt)||$t(t,zt,D(1,{})),t[zt][e]=!0),Qt(t,e,n)):$t(t,e,n)},ee=function(t,e){o(t);for(var n,r=function(t){var e=ht(t),n=vt.f;if(n)for(var r,o=n(t),i=mt.f,c=0;o.length>c;)i.call(t,r=o[c++])&&e.push(r);return e}(e=et(e)),i=0,c=r.length;c>i;)te(t,n=r[i++],e[n]);return t},ne=function(t){var e=Vt.call(this,t=y(t,!0));return!(this===Kt&&I(qt,t)&&!I(Ht,t))&&(!(e||!I(this,t)||!I(qt,t)||I(this,zt)&&this[zt][t])||e)},re=function(t,e){if(t=et(t),e=y(e,!0),t!==Kt||!I(qt,e)||I(Ht,e)){var n=Nt(t,e);return!n||!I(qt,e)||I(t,zt)&&t[zt][e]||(n.enumerable=!0),n}},oe=function(t){for(var e,n=Rt(et(t)),r=[],o=0;n.length>o;)I(qt,e=n[o++])||e==zt||e==At||r.push(e);return r},ie=function(t){for(var e,n=t===Kt,r=Rt(n?Ht:et(t)),o=[],i=0;r.length>i;)!I(qt,e=r[i++])||n&&!I(Kt,e)||o.push(qt[e]);return o};Bt||(U((It=function(){if(this instanceof It)throw TypeError("Symbol is not a constructor!");var t=L(arguments.length>0?arguments[0]:void 0),e=function(n){this===Kt&&e.call(Ht,n),I(this,zt)&&I(this[zt],t)&&(this[zt][t]=!1),Qt(this,t,D(1,n))};return c&&Yt&&Qt(Kt,t,{configurable:!0,set:e}),Xt(t)}).prototype,"toString",(function(){return this._k})),Ft.f=re,v.f=te,Et.f=Mt.f=oe,mt.f=ne,vt.f=ie,c&&U(Kt,"propertyIsEnumerable",ne,!0),A.f=function(t){return Xt(F(t))}),H(H.G+H.W+H.F*!Bt,{Symbol:It});for(var ce="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),ue=0;ce.length>ue;)F(ce[ue++]);for(var fe=ht(F.store),se=0;fe.length>se;)$(fe[se++]);H(H.S+H.F*!Bt,"Symbol",{for:function(t){return I(Gt,t+="")?Gt[t]:Gt[t]=It(t)},keyFor:function(t){if(!Zt(t))throw TypeError(t+" is not a symbol!");for(var e in Gt)if(Gt[e]===t)return e},useSetter:function(){Yt=!0},useSimple:function(){Yt=!1}}),H(H.S+H.F*!Bt,"Object",{create:function(t,e){return void 0===e?Pt(t):ee(Pt(t),e)},defineProperty:te,defineProperties:ee,getOwnPropertyDescriptor:re,getOwnPropertyNames:oe,getOwnPropertySymbols:ie});var ae=i((function(){vt.f(1)}));H(H.S+H.F*ae,"Object",{getOwnPropertySymbols:function(t){return vt.f(dt(t))}}),Dt&&H(H.S+H.F*(!Bt||i((function(){var t=It();return"[null]"!=Wt([t])||"{}"!=Wt({a:t})||"{}"!=Wt(Object(t))}))),"JSON",{stringify:function(t){for(var e,n,o=[t],i=1;arguments.length>i;)o.push(arguments[i++]);if(n=e=o[1],(r(e)||void 0!==t)&&!Zt(t))return bt(e)||(e=function(t,e){if("function"==typeof n&&(e=n.call(this,t,e)),!Zt(e))return e}),o[1]=e,Wt.apply(Dt,o)}}),It.prototype[Ut]||W(It.prototype,Ut,It.prototype.valueOf),Y(It,"Symbol"),Y(Math,"Math",!0),Y(f.JSON,"JSON",!0);var pe=F("unscopables"),le=Array.prototype;null==le[pe]&&W(le,pe,{});var ye=function(t){le[pe][t]=!0},he=function(t,e){return{value:e,done:!!t}},ve={},me={};W(me,F("iterator"),(function(){return this}));var be=function(t,e,n){t.prototype=Pt(me,{next:D(1,n)}),Y(t,e+" Iterator")},de=st("IE_PROTO"),ge=Object.prototype,Oe=Object.getPrototypeOf||function(t){return t=dt(t),I(t,de)?t[de]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?ge:null},Se=F("iterator"),we=!([].keys&&"next"in[].keys()),je=function(){return this},_e=function(t,e,n,r,o,i,c){be(n,e,r);var u,f,s,a=function(t){if(!we&&t in h)return h[t];switch(t){case"keys":case"values":return function(){return new n(this,t)}}return function(){return new n(this,t)}},p=e+" Iterator",l="values"==o,y=!1,h=t.prototype,v=h[Se]||h["@@iterator"]||o&&h[o],m=v||a(o),b=o?l?a("entries"):m:void 0,d="Array"==e&&h.entries||v;if(d&&(s=Oe(d.call(new t)))!==Object.prototype&&s.next&&(Y(s,p,!0),"function"!=typeof s[Se]&&W(s,Se,je)),l&&v&&"values"!==v.name&&(y=!0,m=function(){return v.call(this)}),(we||y||!h[Se])&&W(h,Se,m),ve[e]=m,ve[p]=je,o)if(u={values:l?m:a("values"),keys:i?m:a("keys"),entries:b},c)for(f in u)f in h||U(h,f,u[f]);else H(H.P+H.F*(we||y),e,u);return u}(Array,"Array",(function(t,e){this._t=et(t),this._i=0,this._k=e}),(function(){var t=this._t,e=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,he(1)):he(0,"keys"==e?n:"values"==e?t[n]:[n,t[n]])}),"values");ve.Arguments=ve.Array,ye("keys"),ye("values"),ye("entries");for(var Pe=F("iterator"),xe=F("toStringTag"),Ee=ve.Array,Te={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},Ce=ht(Te),ke=0;ke<Ce.length;ke++){var Me,Le=Ce[ke],Fe=Te[Le],Ae=f[Le],Ne=Ae&&Ae.prototype;if(Ne&&(Ne[Pe]||W(Ne,Pe,Ee),Ne[xe]||W(Ne,xe,Le),ve[Le]=Ee,Fe))for(Me in _e)Ne[Me]||U(Ne,Me,_e[Me],!0)}var $e=F("toStringTag"),Re="Arguments"==X(function(){return arguments}()),Ie={};Ie[F("toStringTag")]="z",Ie+""!="[object z]"&&U(Object.prototype,"toString",(function(){return"[object "+(void 0===(t=this)?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),$e))?n:Re?X(e):"Object"==(r=X(e))&&"function"==typeof e.callee?"Arguments":r)+"]";var t,e,n,r}),!0);var De=function(t,e){var n=(T.Object||{})[t]||Object[t],r={};r[t]=e(n),H(H.S+H.F*i((function(){n(1)})),"Object",r)};De("keys",(function(){return function(t){return ht(dt(t))}}));var We,ze=u((function(t){var e=Object.prototype.hasOwnProperty,n="~";function r(){}function o(t,e,n){this.fn=t,this.context=e,this.once=n||!1}function i(t,e,r,i,c){if("function"!=typeof r)throw new TypeError("The listener must be a function");var u=new o(r,i||t,c),f=n?n+e:e;return t._events[f]?t._events[f].fn?t._events[f]=[t._events[f],u]:t._events[f].push(u):(t._events[f]=u,t._eventsCount++),t}function c(t,e){0==--t._eventsCount?t._events=new r:delete t._events[e]}function u(){this._events=new r,this._eventsCount=0}Object.create&&(r.prototype=Object.create(null),(new r).__proto__||(n=!1)),u.prototype.eventNames=function(){var t,r,o=[];if(0===this._eventsCount)return o;for(r in t=this._events)e.call(t,r)&&o.push(n?r.slice(1):r);return Object.getOwnPropertySymbols?o.concat(Object.getOwnPropertySymbols(t)):o},u.prototype.listeners=function(t){var e=n?n+t:t,r=this._events[e];if(!r)return[];if(r.fn)return[r.fn];for(var o=0,i=r.length,c=new Array(i);o<i;o++)c[o]=r[o].fn;return c},u.prototype.listenerCount=function(t){var e=n?n+t:t,r=this._events[e];return r?r.fn?1:r.length:0},u.prototype.emit=function(t,e,r,o,i,c){var u=n?n+t:t;if(!this._events[u])return!1;var f,s,a=this._events[u],p=arguments.length;if(a.fn){switch(a.once&&this.removeListener(t,a.fn,void 0,!0),p){case 1:return a.fn.call(a.context),!0;case 2:return a.fn.call(a.context,e),!0;case 3:return a.fn.call(a.context,e,r),!0;case 4:return a.fn.call(a.context,e,r,o),!0;case 5:return a.fn.call(a.context,e,r,o,i),!0;case 6:return a.fn.call(a.context,e,r,o,i,c),!0}for(s=1,f=new Array(p-1);s<p;s++)f[s-1]=arguments[s];a.fn.apply(a.context,f)}else{var l,y=a.length;for(s=0;s<y;s++)switch(a[s].once&&this.removeListener(t,a[s].fn,void 0,!0),p){case 1:a[s].fn.call(a[s].context);break;case 2:a[s].fn.call(a[s].context,e);break;case 3:a[s].fn.call(a[s].context,e,r);break;case 4:a[s].fn.call(a[s].context,e,r,o);break;default:if(!f)for(l=1,f=new Array(p-1);l<p;l++)f[l-1]=arguments[l];a[s].fn.apply(a[s].context,f)}}return!0},u.prototype.on=function(t,e,n){return i(this,t,e,n,!1)},u.prototype.once=function(t,e,n){return i(this,t,e,n,!0)},u.prototype.removeListener=function(t,e,r,o){var i=n?n+t:t;if(!this._events[i])return this;if(!e)return c(this,i),this;var u=this._events[i];if(u.fn)u.fn!==e||o&&!u.once||r&&u.context!==r||c(this,i);else{for(var f=0,s=[],a=u.length;f<a;f++)(u[f].fn!==e||o&&!u[f].once||r&&u[f].context!==r)&&s.push(u[f]);s.length?this._events[i]=1===s.length?s[0]:s:c(this,i)}return this},u.prototype.removeAllListeners=function(t){var e;return t?(e=n?n+t:t,this._events[e]&&c(this,e)):(this._events=new r,this._eventsCount=0),this},u.prototype.off=u.prototype.removeListener,u.prototype.addListener=u.prototype.on,u.prefixed=n,u.EventEmitter=u,t.exports=u}));function Ue(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=t[e],o=Ve[e],i=r?!0===n?function(){o.apply(this,arguments),r.apply(this,arguments)}:function(){r.apply(this,arguments),o.apply(this,arguments)}:o;t[e]=i}We=window.eventInstance?window.eventInstance:new ze;var Ve={dispatch:function(t){We.emit(t.type,t)},componentWillMount:function(){var t=this;if(this.onEventAction){var e=!0,n=!1,r=void 0;try{for(var o,i=this.events[Symbol.iterator]();!(e=(o=i.next()).done);e=!0){var c=o.value;We.on(c,this.listener=function(e){t.onEventAction(e),console.log("action:",e)})}}catch(t){n=!0,r=t}finally{try{e||null==i.return||i.return()}finally{if(n)throw r}}}},componentWillUnmount:function(){if(this.onEventAction){var t=!0,e=!1,n=void 0;try{for(var r,o=this.events[Symbol.iterator]();!(t=(r=o.next()).done);t=!0){var i=r.value;We.removeListener(i,this.listener)}}catch(t){e=!0,n=t}finally{try{t||null==o.return||o.return()}finally{if(e)throw n}}}},shouldComponentUpdate:function(t,e){return this.state!==e||function(t,e){if(null==t||null==e||"object"!==w(t)||"object"!==w(e))return t!==e;var n,r=Object.keys(t);if(r.length!==Object.keys(e).length)return!0;for(var o=r.length-1;n=r[o];o--)if(e[n]!==t[n])return!0;return!1}(this.props,t)}};function Ge(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];return function(n){var r,o,i=n;if(!("function"!=typeof i||i.prototype&&i.prototype.render||i.isReactClass||t.isPrototypeOf(i)))return Ge((o=r=function(e){function n(){return g(this,n),_(this,P(n).apply(this,arguments))}return E(n,t),S(n,[{key:"render",value:function(){return i.call(this,this.props,this.context)}}]),n}(),r.displayName=i.displayName||i.name,r.contextTypes=i.contextTypes,r.propTypes=i.propTypes,r.defaultProps=i.defaultProps,r.events=e,o));if(!i)throw new Error("è¯·ä¼ å¥åæ³çç»ä»¶ç»å®observer");var c=i.prototype||i;return c.events=e,qe(c),i}}function qe(t){Ue(t,"componentWillMount",!0),["dispatch","componentWillUnmount"].forEach((function(e){Ue(t,e)})),t.shouldComponentUpdate||(t.shouldComponentUpdate=Ve.shouldComponentUpdate)}
/** @license React v16.13.0
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var He="function"==typeof Symbol&&Symbol.for,Ke=He?Symbol.for("react.element"):60103,Be=He?Symbol.for("react.portal"):60106,Je=He?Symbol.for("react.fragment"):60107,Ye=He?Symbol.for("react.strict_mode"):60108,Qe=He?Symbol.for("react.profiler"):60114,Xe=He?Symbol.for("react.provider"):60109,Ze=He?Symbol.for("react.context"):60110,tn=He?Symbol.for("react.async_mode"):60111,en=He?Symbol.for("react.concurrent_mode"):60111,nn=He?Symbol.for("react.forward_ref"):60112,rn=He?Symbol.for("react.suspense"):60113,on=He?Symbol.for("react.suspense_list"):60120,cn=He?Symbol.for("react.memo"):60115,un=He?Symbol.for("react.lazy"):60116,fn=He?Symbol.for("react.block"):60121,sn=He?Symbol.for("react.fundamental"):60117,an=He?Symbol.for("react.responder"):60118,pn=He?Symbol.for("react.scope"):60119;function ln(t){if("object"==typeof t&&null!==t){var e=t.$$typeof;switch(e){case Ke:switch(t=t.type){case tn:case en:case Je:case Qe:case Ye:case rn:return t;default:switch(t=t&&t.$$typeof){case Ze:case nn:case un:case cn:case Xe:return t;default:return e}}case Be:return e}}}function yn(t){return ln(t)===en}var hn={AsyncMode:tn,ConcurrentMode:en,ContextConsumer:Ze,ContextProvider:Xe,Element:Ke,ForwardRef:nn,Fragment:Je,Lazy:un,Memo:cn,Portal:Be,Profiler:Qe,StrictMode:Ye,Suspense:rn,isAsyncMode:function(t){return yn(t)||ln(t)===tn},isConcurrentMode:yn,isContextConsumer:function(t){return ln(t)===Ze},isContextProvider:function(t){return ln(t)===Xe},isElement:function(t){return"object"==typeof t&&null!==t&&t.$$typeof===Ke},isForwardRef:function(t){return ln(t)===nn},isFragment:function(t){return ln(t)===Je},isLazy:function(t){return ln(t)===un},isMemo:function(t){return ln(t)===cn},isPortal:function(t){return ln(t)===Be},isProfiler:function(t){return ln(t)===Qe},isStrictMode:function(t){return ln(t)===Ye},isSuspense:function(t){return ln(t)===rn},isValidElementType:function(t){return"string"==typeof t||"function"==typeof t||t===Je||t===en||t===Qe||t===Ye||t===rn||t===on||"object"==typeof t&&null!==t&&(t.$$typeof===un||t.$$typeof===cn||t.$$typeof===Xe||t.$$typeof===Ze||t.$$typeof===nn||t.$$typeof===sn||t.$$typeof===an||t.$$typeof===pn||t.$$typeof===fn)},typeOf:ln},vn=u((function(t,e){})),mn=(vn.AsyncMode,vn.ConcurrentMode,vn.ContextConsumer,vn.ContextProvider,vn.Element,vn.ForwardRef,vn.Fragment,vn.Lazy,vn.Memo,vn.Portal,vn.Profiler,vn.StrictMode,vn.Suspense,vn.isAsyncMode,vn.isConcurrentMode,vn.isContextConsumer,vn.isContextProvider,vn.isElement,vn.isForwardRef,vn.isFragment,vn.isLazy,vn.isMemo,vn.isPortal,vn.isProfiler,vn.isStrictMode,vn.isSuspense,vn.isValidElementType,vn.typeOf,u((function(t){t.exports=hn}))),bn=Object.getOwnPropertySymbols,dn=Object.prototype.hasOwnProperty,gn=Object.prototype.propertyIsEnumerable;function On(t){if(null==t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}(function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},n=0;n<10;n++)e["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(e).map((function(t){return e[t]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(t){r[t]=t})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(t){return!1}})()&&Object.assign,Function.call.bind(Object.prototype.hasOwnProperty);function Sn(){}function wn(){}wn.resetWarningCache=Sn;var jn=u((function(t){t.exports=function(){function t(t,e,n,r,o,i){if("SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"!==i){var c=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw c.name="Invariant Violation",c}}function e(){return t}t.isRequired=t;var n={array:t,bool:t,func:t,number:t,object:t,string:t,symbol:t,any:t,arrayOf:e,element:t,elementType:t,instanceOf:e,node:t,objectOf:e,oneOf:e,oneOfType:e,shape:e,exact:e,checkPropTypes:wn,resetWarningCache:Sn};return n.PropTypes=n,n}()})),_n={children:!0,key:!0,ref:!0},Pn=function(n){function r(){return g(this,r),_(this,P(r).apply(this,arguments))}return E(r,t),S(r,[{key:"render",value:function(){return e.only(this.props.children)}},{key:"getChildContext",value:function(){var t={};for(var e in this.props)_n[e]||(t[e]=this.props[e]);return{store:t}}}]),r}();Pn.contextTypes={store:jn.object},Pn.childContextTypes={store:jn.object.isRequired},Pn.propTypes={children:jn.object};var xn=K.onFreeze;De("seal",(function(t){return function(e){return t&&r(e)?t(xn(e)):e}}));var En={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},Tn={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},Cn={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},kn={};function Mn(t){return mn.isMemo(t)?Cn:kn[t.$$typeof]||En}kn[mn.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},kn[mn.Memo]=Cn;var Ln=Object.defineProperty,Fn=Object.getOwnPropertyNames,An=Object.getOwnPropertySymbols,Nn=Object.getOwnPropertyDescriptor,$n=Object.getPrototypeOf,Rn=Object.prototype;var In=function t(e,n,r){if("string"!=typeof n){if(Rn){var o=$n(n);o&&o!==Rn&&t(e,o,r)}var i=Fn(n);An&&(i=i.concat(An(n)));for(var c=Mn(e),u=Mn(n),f=0;f<i.length;++f){var s=i[f];if(!(Tn[s]||r&&r[s]||u&&u[s]||c&&c[s])){var a=Nn(n,s);try{Ln(e,s,a)}catch(t){}}}}return e};var Dn={store:jn.objectOrObservableObject};Object.seal(Dn);var Wn={contextTypes:{get:function(){return Dn},set:function(t){console.warn("contextä¸å¯ä»¥ä¿®æ¹")},configurable:!0,enumerable:!1}};function zn(e,r,o){var i="inject-"+(r.displayName||r.name||r.constructor&&r.constructor.name||"Unknown");o&&(i+="-with-"+o);var c=function(o){function i(){var t,e;g(this,i);for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(e=_(this,(t=P(i)).call.apply(t,[this].concat(r)))).storeRef=function(t){e.wrappedInstance=t},e}return E(i,t),S(i,[{key:"render",value:function(){var t={};for(var o in this.props)this.props.hasOwnProperty(o)&&(t[o]=this.props[o]);var i=e(this.context.store||{},t,this.context)||{};for(var c in i)t[c]=i[c];return function(t){return!(t.prototype&&t.prototype.render)}(r)||(t.ref=this.storeRef),n(r,t)}}]),i}();return c.displayName=i,In(c,r),c.wrappedComponent=r,Object.defineProperties(c,Wn),c}function Un(t){return function(e,n){return t.forEach((function(t){if(!(t in n)){if(!(t in e))throw new Error("inject:".concat(t,"ä¸å¨Providerçpropsä¸­,è¯·æ¢ä¸ªå¼éæ°inject"));n[t]=e[t]}})),n}}function Vn(){for(var t,e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return t=Un(e),function(n){return zn(t,n,e.join("-"))}}export{Pn as Provider,Vn as inject,Ge as observer};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5lc20uanMiLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLW9iamVjdC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLW9iamVjdC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZhaWxzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19nbG9iYWwuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kb20tY3JlYXRlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faWU4LWRvbS1kZWZpbmUuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1wcmltaXRpdmUuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHAuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanMiLCIuLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZi5qcyIsIi4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcyIsIi4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4uanMiLCIuLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZi5qcyIsIi4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3NldFByb3RvdHlwZU9mLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb3JlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdWlkLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLWV4dC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1kZWZpbmUuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oYXMuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faGlkZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Z1bmN0aW9uLXRvLXN0cmluZy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3R4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYS1mdW5jdGlvbi5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2V4cG9ydC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWV0YS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29mLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW9iamVjdC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RlZmluZWQuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pb2JqZWN0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW50ZWdlci5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWxlbmd0aC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWFic29sdXRlLWluZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLWludGVybmFsLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1idWcta2V5cy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcHMuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtcGllLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtYXJyYXkuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1vYmplY3QuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHBzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faHRtbC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1jcmVhdGUuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BuLWV4dC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BkLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3ltYm9sLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1rZXlzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1zdGVwLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlcmF0b3JzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jcmVhdGUuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ3BvLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZWZpbmUuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvci5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NsYXNzb2YuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXNhcC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzLmpzIiwiLi4vc3JjL29ic2VydmVyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2V2ZW50ZW1pdHRlcjMvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qcyIsIi4uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwiLi4vc3JjL1Byb3ZpZGVyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnNlYWwuanMiLCIuLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvZGlzdC9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy5janMuanMiLCIuLi9zcmMvaW5qZWN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYW4gb2JqZWN0IScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCIvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUykge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBkUCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBGUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG52YXIgbmFtZVJFID0gL15cXHMqZnVuY3Rpb24gKFteIChdKikvO1xudmFyIE5BTUUgPSAnbmFtZSc7XG5cbi8vIDE5LjIuNC4yIG5hbWVcbk5BTUUgaW4gRlByb3RvIHx8IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgZFAoRlByb3RvLCBOQU1FLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoJycgKyB0aGlzKS5tYXRjaChuYW1lUkUpWzFdO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH1cbn0pO1xuIiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfY2xhc3NDYWxsQ2hlY2s7IiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9jcmVhdGVDbGFzczsiLCJmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7XG5cbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX3R5cGVvZihvYmopO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF90eXBlb2Y7IiwiZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemVkOyIsInZhciBfdHlwZW9mID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvdHlwZW9mXCIpO1xuXG52YXIgYXNzZXJ0VGhpc0luaXRpYWxpemVkID0gcmVxdWlyZShcIi4vYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpO1xuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gIGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7XG4gICAgcmV0dXJuIGNhbGw7XG4gIH1cblxuICByZXR1cm4gYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuOyIsImZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgICByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pO1xuICB9O1xuICByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9nZXRQcm90b3R5cGVPZjsiLCJmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcblxuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9zZXRQcm90b3R5cGVPZjsiLCJ2YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKFwiLi9zZXRQcm90b3R5cGVPZlwiKTtcblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG4gIH1cblxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBpZiAoc3VwZXJDbGFzcykgc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbmhlcml0czsiLCJ2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0geyB2ZXJzaW9uOiAnMi42LjExJyB9O1xuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsInZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgKGdsb2JhbFtTSEFSRURdID0ge30pO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogY29yZS52ZXJzaW9uLFxuICBtb2RlOiByZXF1aXJlKCcuL19saWJyYXJ5JykgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAxOSBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuIiwidmFyIGlkID0gMDtcbnZhciBweCA9IE1hdGgucmFuZG9tKCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsraWQgKyBweCkudG9TdHJpbmcoMzYpKTtcbn07XG4iLCJ2YXIgc3RvcmUgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnd2tzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuU3ltYm9sO1xudmFyIFVTRV9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09ICdmdW5jdGlvbic7XG5cbnZhciAkZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9XG4gICAgVVNFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV0gfHwgKFVTRV9TWU1CT0wgPyBTeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07XG5cbiRleHBvcnRzLnN0b3JlID0gc3RvcmU7XG4iLCJleHBvcnRzLmYgPSByZXF1aXJlKCcuL193a3MnKTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyICRTeW1ib2wgPSBjb3JlLlN5bWJvbCB8fCAoY29yZS5TeW1ib2wgPSBMSUJSQVJZID8ge30gOiBnbG9iYWwuU3ltYm9sIHx8IHt9KTtcbiAgaWYgKG5hbWUuY2hhckF0KDApICE9ICdfJyAmJiAhKG5hbWUgaW4gJFN5bWJvbCkpIGRlZmluZVByb3BlcnR5KCRTeW1ib2wsIG5hbWUsIHsgdmFsdWU6IHdrc0V4dC5mKG5hbWUpIH0pO1xufTtcbiIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnYXN5bmNJdGVyYXRvcicpO1xuIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCduYXRpdmUtZnVuY3Rpb24tdG8tc3RyaW5nJywgRnVuY3Rpb24udG9TdHJpbmcpO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgU1JDID0gcmVxdWlyZSgnLi9fdWlkJykoJ3NyYycpO1xudmFyICR0b1N0cmluZyA9IHJlcXVpcmUoJy4vX2Z1bmN0aW9uLXRvLXN0cmluZycpO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgVFBMID0gKCcnICsgJHRvU3RyaW5nKS5zcGxpdChUT19TVFJJTkcpO1xuXG5yZXF1aXJlKCcuL19jb3JlJykuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gJHRvU3RyaW5nLmNhbGwoaXQpO1xufTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsLCBzYWZlKSB7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIHZhbCA9PSAnZnVuY3Rpb24nO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgJ25hbWUnKSB8fCBoaWRlKHZhbCwgJ25hbWUnLCBrZXkpO1xuICBpZiAoT1trZXldID09PSB2YWwpIHJldHVybjtcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsIFNSQykgfHwgaGlkZSh2YWwsIFNSQywgT1trZXldID8gJycgKyBPW2tleV0gOiBUUEwuam9pbihTdHJpbmcoa2V5KSkpO1xuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2UgaWYgKCFzYWZlKSB7XG4gICAgZGVsZXRlIE9ba2V5XTtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfSBlbHNlIGlmIChPW2tleV0pIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSB7XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH1cbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiB0aGlzW1NSQ10gfHwgJHRvU3RyaW5nLmNhbGwodGhpcyk7XG59KTtcbiIsIi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uICh0eXBlLCBuYW1lLCBzb3VyY2UpIHtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkY7XG4gIHZhciBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HO1xuICB2YXIgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuUztcbiAgdmFyIElTX1BST1RPID0gdHlwZSAmICRleHBvcnQuUDtcbiAgdmFyIElTX0JJTkQgPSB0eXBlICYgJGV4cG9ydC5CO1xuICB2YXIgdGFyZ2V0ID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIHx8IChnbG9iYWxbbmFtZV0gPSB7fSkgOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdO1xuICB2YXIgZXhwb3J0cyA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pO1xuICB2YXIgZXhwUHJvdG8gPSBleHBvcnRzW1BST1RPVFlQRV0gfHwgKGV4cG9ydHNbUFJPVE9UWVBFXSA9IHt9KTtcbiAgdmFyIGtleSwgb3duLCBvdXQsIGV4cDtcbiAgaWYgKElTX0dMT0JBTCkgc291cmNlID0gbmFtZTtcbiAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IChvd24gPyB0YXJnZXQgOiBzb3VyY2UpW2tleV07XG4gICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcbiAgICBleHAgPSBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgaWYgKHRhcmdldCkgcmVkZWZpbmUodGFyZ2V0LCBrZXksIG91dCwgdHlwZSAmICRleHBvcnQuVSk7XG4gICAgLy8gZXhwb3J0XG4gICAgaWYgKGV4cG9ydHNba2V5XSAhPSBvdXQpIGhpZGUoZXhwb3J0cywga2V5LCBleHApO1xuICAgIGlmIChJU19QUk9UTyAmJiBleHBQcm90b1trZXldICE9IG91dCkgZXhwUHJvdG9ba2V5XSA9IG91dDtcbiAgfVxufTtcbmdsb2JhbC5jb3JlID0gY29yZTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcbiIsIi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSB7XG4gICAgICBpZiAoT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuIiwidmFyIE1FVEEgPSByZXF1aXJlKCcuL191aWQnKSgnbWV0YScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgc2V0RGVzYyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaWQgPSAwO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgRlJFRVpFID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gaXNFeHRlbnNpYmxlKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpO1xufSk7XG52YXIgc2V0TWV0YSA9IGZ1bmN0aW9uIChpdCkge1xuICBzZXREZXNjKGl0LCBNRVRBLCB7IHZhbHVlOiB7XG4gICAgaTogJ08nICsgKytpZCwgLy8gb2JqZWN0IElEXG4gICAgdzoge30gICAgICAgICAgLy8gd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSB9KTtcbn07XG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIC8vIHJldHVybiBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBXS5pO1xufTtcbnZhciBnZXRXZWFrID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiB0cnVlO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiBmYWxzZTtcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gaGFzaCB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IHJldHVybiBpdFtNRVRBXS53O1xufTtcbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChGUkVFWkUgJiYgbWV0YS5ORUVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQSkpIHNldE1ldGEoaXQpO1xuICByZXR1cm4gaXQ7XG59O1xudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgS0VZOiBNRVRBLFxuICBORUVEOiBmYWxzZSxcbiAgZmFzdEtleTogZmFzdEtleSxcbiAgZ2V0V2VhazogZ2V0V2VhayxcbiAgb25GcmVlemU6IG9uRnJlZXplXG59O1xuIiwidmFyIGRlZiA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCB0YWcsIHN0YXQpIHtcbiAgaWYgKGl0ICYmICFoYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpIGRlZihpdCwgVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHRhZyB9KTtcbn07XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG4iLCIvLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKSA/IE9iamVjdCA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7XG59O1xuIiwiLy8gNy4yLjEgUmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudClcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIi8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCIvLyA3LjEuNCBUb0ludGVnZXJcbnZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpc05hTihpdCA9ICtpdCkgPyAwIDogKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xufTtcbiIsIi8vIDcuMS4xNSBUb0xlbmd0aFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA+IDAgPyBtaW4odG9JbnRlZ2VyKGl0KSwgMHgxZmZmZmZmZmZmZmZmZikgOiAwOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgaW5kZXggPSB0b0ludGVnZXIoaW5kZXgpO1xuICByZXR1cm4gaW5kZXggPCAwID8gbWF4KGluZGV4ICsgbGVuZ3RoLCAwKSA6IG1pbihpbmRleCwgbGVuZ3RoKTtcbn07XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ2tleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gdWlkKGtleSkpO1xufTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgYXJyYXlJbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pIGlmIChrZXkgIT0gSUVfUFJPVE8pIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+YXJyYXlJbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7XG4iLCIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiIsImV4cG9ydHMuZiA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuIiwiLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gY29mKGFyZykgPT0gJ0FycmF5Jztcbn07XG4iLCIvLyA3LjEuMTMgVG9PYmplY3QoYXJndW1lbnQpXG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IGdldEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgUDtcbiAgd2hpbGUgKGxlbmd0aCA+IGkpIGRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xubW9kdWxlLmV4cG9ydHMgPSBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4iLCIvLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGRQcyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBFbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2lmcmFtZScpO1xuICB2YXIgaSA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgdmFyIGx0ID0gJzwnO1xuICB2YXIgZ3QgPSAnPic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIHJlcXVpcmUoJy4vX2h0bWwnKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZSAoaS0tKSBkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHkoKTtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCIvLyAxOS4xLjIuNyAvIDE1LjIuMy40IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJykuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gJGtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwiLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZ09QTihpdCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgcmV0dXJuIHdpbmRvd05hbWVzICYmIHRvU3RyaW5nLmNhbGwoaXQpID09ICdbb2JqZWN0IFdpbmRvd10nID8gZ2V0V2luZG93TmFtZXMoaXQpIDogZ09QTih0b0lPYmplY3QoaXQpKTtcbn07XG4iLCJ2YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZ09QRCA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIE8gPSB0b0lPYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBnT1BEKE8sIFApO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKGhhcyhPLCBQKSkgcmV0dXJuIGNyZWF0ZURlc2MoIXBJRS5mLmNhbGwoTywgUCksIE9bUF0pO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEVDTUFTY3JpcHQgNiBzeW1ib2xzIHNoaW1cbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBNRVRBID0gcmVxdWlyZSgnLi9fbWV0YScpLktFWTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgd2tzRGVmaW5lID0gcmVxdWlyZSgnLi9fd2tzLWRlZmluZScpO1xudmFyIGVudW1LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1rZXlzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBfY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGdPUE5FeHQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKTtcbnZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgJEdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyICREUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BEID0gJEdPUEQuZjtcbnZhciBkUCA9ICREUC5mO1xudmFyIGdPUE4gPSBnT1BORXh0LmY7XG52YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgJEpTT04gPSBnbG9iYWwuSlNPTjtcbnZhciBfc3RyaW5naWZ5ID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIEhJRERFTiA9IHdrcygnX2hpZGRlbicpO1xudmFyIFRPX1BSSU1JVElWRSA9IHdrcygndG9QcmltaXRpdmUnKTtcbnZhciBpc0VudW0gPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBTeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXJlZ2lzdHJ5Jyk7XG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xudmFyIE9QU3ltYm9scyA9IHNoYXJlZCgnb3Atc3ltYm9scycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0W1BST1RPVFlQRV07XG52YXIgVVNFX05BVElWRSA9IHR5cGVvZiAkU3ltYm9sID09ICdmdW5jdGlvbicgJiYgISEkR09QUy5mO1xudmFyIFFPYmplY3QgPSBnbG9iYWwuUU9iamVjdDtcbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIHNldHRlciA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7XG5cbi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xudmFyIHNldFN5bWJvbERlc2MgPSBERVNDUklQVE9SUyAmJiAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gX2NyZWF0ZShkUCh7fSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkUCh0aGlzLCAnYScsIHsgdmFsdWU6IDcgfSkuYTsgfVxuICB9KSkuYSAhPSA3O1xufSkgPyBmdW5jdGlvbiAoaXQsIGtleSwgRCkge1xuICB2YXIgcHJvdG9EZXNjID0gZ09QRChPYmplY3RQcm90bywga2V5KTtcbiAgaWYgKHByb3RvRGVzYykgZGVsZXRlIE9iamVjdFByb3RvW2tleV07XG4gIGRQKGl0LCBrZXksIEQpO1xuICBpZiAocHJvdG9EZXNjICYmIGl0ICE9PSBPYmplY3RQcm90bykgZFAoT2JqZWN0UHJvdG8sIGtleSwgcHJvdG9EZXNjKTtcbn0gOiBkUDtcblxudmFyIHdyYXAgPSBmdW5jdGlvbiAodGFnKSB7XG4gIHZhciBzeW0gPSBBbGxTeW1ib2xzW3RhZ10gPSBfY3JlYXRlKCRTeW1ib2xbUFJPVE9UWVBFXSk7XG4gIHN5bS5fayA9IHRhZztcbiAgcmV0dXJuIHN5bTtcbn07XG5cbnZhciBpc1N5bWJvbCA9IFVTRV9OQVRJVkUgJiYgdHlwZW9mICRTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCcgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0IGluc3RhbmNlb2YgJFN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBEKSB7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8pICRkZWZpbmVQcm9wZXJ0eShPUFN5bWJvbHMsIGtleSwgRCk7XG4gIGFuT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgYW5PYmplY3QoRCk7XG4gIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghRC5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhcyhpdCwgSElEREVOKSkgZFAoaXQsIEhJRERFTiwgY3JlYXRlRGVzYygxLCB7fSkpO1xuICAgICAgaXRbSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pIGl0W0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgRCA9IF9jcmVhdGUoRCwgeyBlbnVtZXJhYmxlOiBjcmVhdGVEZXNjKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjKGl0LCBrZXksIEQpO1xuICB9IHJldHVybiBkUChpdCwga2V5LCBEKTtcbn07XG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKGl0LCBQKSB7XG4gIGFuT2JqZWN0KGl0KTtcbiAgdmFyIGtleXMgPSBlbnVtS2V5cyhQID0gdG9JT2JqZWN0KFApKTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgbCA9IGtleXMubGVuZ3RoO1xuICB2YXIga2V5O1xuICB3aGlsZSAobCA+IGkpICRkZWZpbmVQcm9wZXJ0eShpdCwga2V5ID0ga2V5c1tpKytdLCBQW2tleV0pO1xuICByZXR1cm4gaXQ7XG59O1xudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaXQsIFApIHtcbiAgcmV0dXJuIFAgPT09IHVuZGVmaW5lZCA/IF9jcmVhdGUoaXQpIDogJGRlZmluZVByb3BlcnRpZXMoX2NyZWF0ZShpdCksIFApO1xufTtcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShrZXkpIHtcbiAgdmFyIEUgPSBpc0VudW0uY2FsbCh0aGlzLCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKTtcbiAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBFIHx8ICFoYXModGhpcywga2V5KSB8fCAhaGFzKEFsbFN5bWJvbHMsIGtleSkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW2tleV0gPyBFIDogdHJ1ZTtcbn07XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gIGl0ID0gdG9JT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuO1xuICB2YXIgRCA9IGdPUEQoaXQsIGtleSk7XG4gIGlmIChEICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpIEQuZW51bWVyYWJsZSA9IHRydWU7XG4gIHJldHVybiBEO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgdmFyIG5hbWVzID0gZ09QTih0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKCFoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYga2V5ICE9IEhJRERFTiAmJiBrZXkgIT0gTUVUQSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gIHZhciBJU19PUCA9IGl0ID09PSBPYmplY3RQcm90bztcbiAgdmFyIG5hbWVzID0gZ09QTihJU19PUCA/IE9QU3ltYm9scyA6IHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIChJU19PUCA/IGhhcyhPYmplY3RQcm90bywga2V5KSA6IHRydWUpKSByZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyAxOS40LjEuMSBTeW1ib2woW2Rlc2NyaXB0aW9uXSlcbmlmICghVVNFX05BVElWRSkge1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIGlmICh0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCkgdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3IhJyk7XG4gICAgdmFyIHRhZyA9IHVpZChhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gICAgdmFyICRzZXQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzID09PSBPYmplY3RQcm90bykgJHNldC5jYWxsKE9QU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYgKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpIHRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjKHRoaXMsIHRhZywgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIHNldHRlcikgc2V0U3ltYm9sRGVzYyhPYmplY3RQcm90bywgdGFnLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgc2V0OiAkc2V0IH0pO1xuICAgIHJldHVybiB3cmFwKHRhZyk7XG4gIH07XG4gIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2s7XG4gIH0pO1xuXG4gICRHT1BELmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAkRFAuZiA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mID0gZ09QTkV4dC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICAkR09QUy5mID0gJGdldE93blByb3BlcnR5U3ltYm9scztcblxuICBpZiAoREVTQ1JJUFRPUlMgJiYgIXJlcXVpcmUoJy4vX2xpYnJhcnknKSkge1xuICAgIHJlZGVmaW5lKE9iamVjdFByb3RvLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHRydWUpO1xuICB9XG5cbiAgd2tzRXh0LmYgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiB3cmFwKHdrcyhuYW1lKSk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHsgU3ltYm9sOiAkU3ltYm9sIH0pO1xuXG5mb3IgKHZhciBlczZTeW1ib2xzID0gKFxuICAvLyAxOS40LjIuMiwgMTkuNC4yLjMsIDE5LjQuMi40LCAxOS40LjIuNiwgMTkuNC4yLjgsIDE5LjQuMi45LCAxOS40LjIuMTAsIDE5LjQuMi4xMSwgMTkuNC4yLjEyLCAxOS40LjIuMTMsIDE5LjQuMi4xNFxuICAnaGFzSW5zdGFuY2UsaXNDb25jYXRTcHJlYWRhYmxlLGl0ZXJhdG9yLG1hdGNoLHJlcGxhY2Usc2VhcmNoLHNwZWNpZXMsc3BsaXQsdG9QcmltaXRpdmUsdG9TdHJpbmdUYWcsdW5zY29wYWJsZXMnXG4pLnNwbGl0KCcsJyksIGogPSAwOyBlczZTeW1ib2xzLmxlbmd0aCA+IGo7KXdrcyhlczZTeW1ib2xzW2orK10pO1xuXG5mb3IgKHZhciB3ZWxsS25vd25TeW1ib2xzID0gJGtleXMod2tzLnN0b3JlKSwgayA9IDA7IHdlbGxLbm93blN5bWJvbHMubGVuZ3RoID4gazspIHdrc0RlZmluZSh3ZWxsS25vd25TeW1ib2xzW2srK10pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnU3ltYm9sJywge1xuICAvLyAxOS40LjIuMSBTeW1ib2wuZm9yKGtleSlcbiAgJ2Zvcic6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gaGFzKFN5bWJvbFJlZ2lzdHJ5LCBrZXkgKz0gJycpXG4gICAgICA/IFN5bWJvbFJlZ2lzdHJ5W2tleV1cbiAgICAgIDogU3ltYm9sUmVnaXN0cnlba2V5XSA9ICRTeW1ib2woa2V5KTtcbiAgfSxcbiAgLy8gMTkuNC4yLjUgU3ltYm9sLmtleUZvcihzeW0pXG4gIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKHN5bSkge1xuICAgIGlmICghaXNTeW1ib2woc3ltKSkgdGhyb3cgVHlwZUVycm9yKHN5bSArICcgaXMgbm90IGEgc3ltYm9sIScpO1xuICAgIGZvciAodmFyIGtleSBpbiBTeW1ib2xSZWdpc3RyeSkgaWYgKFN5bWJvbFJlZ2lzdHJ5W2tleV0gPT09IHN5bSkgcmV0dXJuIGtleTtcbiAgfSxcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IHRydWU7IH0sXG4gIHVzZVNpbXBsZTogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSBmYWxzZTsgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdPYmplY3QnLCB7XG4gIC8vIDE5LjEuMi4yIE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyAxOS4xLjIuNCBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gMTkuMS4yLjMgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICAvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgLy8gMTkuMS4yLjggT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhPKVxuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyBDaHJvbWUgMzggYW5kIDM5IGBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzYCBmYWlscyBvbiBwcmltaXRpdmVzXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNDQzXG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9ICRmYWlscyhmdW5jdGlvbiAoKSB7ICRHT1BTLmYoMSk7IH0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIEZBSUxTX09OX1BSSU1JVElWRVMsICdPYmplY3QnLCB7XG4gIGdldE93blByb3BlcnR5U3ltYm9sczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gICAgcmV0dXJuICRHT1BTLmYodG9PYmplY3QoaXQpKTtcbiAgfVxufSk7XG5cbi8vIDI0LjMuMiBKU09OLnN0cmluZ2lmeSh2YWx1ZSBbLCByZXBsYWNlciBbLCBzcGFjZV1dKVxuJEpTT04gJiYgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoIVVTRV9OQVRJVkUgfHwgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIFMgPSAkU3ltYm9sKCk7XG4gIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICByZXR1cm4gX3N0cmluZ2lmeShbU10pICE9ICdbbnVsbF0nIHx8IF9zdHJpbmdpZnkoeyBhOiBTIH0pICE9ICd7fScgfHwgX3N0cmluZ2lmeShPYmplY3QoUykpICE9ICd7fSc7XG59KSksICdKU09OJywge1xuICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCkge1xuICAgIHZhciBhcmdzID0gW2l0XTtcbiAgICB2YXIgaSA9IDE7XG4gICAgdmFyIHJlcGxhY2VyLCAkcmVwbGFjZXI7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgICRyZXBsYWNlciA9IHJlcGxhY2VyID0gYXJnc1sxXTtcbiAgICBpZiAoIWlzT2JqZWN0KHJlcGxhY2VyKSAmJiBpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkgcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gICAgaWYgKCFpc0FycmF5KHJlcGxhY2VyKSkgcmVwbGFjZXIgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiAkcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykgdmFsdWUgPSAkcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgIGlmICghaXNTeW1ib2wodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgcmV0dXJuIF9zdHJpbmdpZnkuYXBwbHkoJEpTT04sIGFyZ3MpO1xuICB9XG59KTtcblxuLy8gMTkuNC4zLjQgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXShoaW50KVxuJFN5bWJvbFtQUk9UT1RZUEVdW1RPX1BSSU1JVElWRV0gfHwgcmVxdWlyZSgnLi9faGlkZScpKCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7XG4vLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCAnU3ltYm9sJyk7XG4vLyAyMC4yLjEuOSBNYXRoW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xuLy8gMjQuMy4zIEpTT05bQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpO1xuIiwiLy8gYWxsIGVudW1lcmFibGUgb2JqZWN0IGtleXMsIGluY2x1ZGVzIHN5bWJvbHNcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgcmVzdWx0ID0gZ2V0S2V5cyhpdCk7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICBpZiAoZ2V0U3ltYm9scykge1xuICAgIHZhciBzeW1ib2xzID0gZ2V0U3ltYm9scyhpdCk7XG4gICAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChzeW1ib2xzLmxlbmd0aCA+IGkpIGlmIChpc0VudW0uY2FsbChpdCwga2V5ID0gc3ltYm9sc1tpKytdKSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIDIyLjEuMy4zMSBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbnZhciBVTlNDT1BBQkxFUyA9IHJlcXVpcmUoJy4vX3drcycpKCd1bnNjb3BhYmxlcycpO1xudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5pZiAoQXJyYXlQcm90b1tVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKSByZXF1aXJlKCcuL19oaWRlJykoQXJyYXlQcm90bywgVU5TQ09QQUJMRVMsIHt9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICBBcnJheVByb3RvW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChkb25lLCB2YWx1ZSkge1xuICByZXR1cm4geyB2YWx1ZTogdmFsdWUsIGRvbmU6ICEhZG9uZSB9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19oaWRlJykoSXRlcmF0b3JQcm90b3R5cGUsIHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpIHtcbiAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGRlc2NyaXB0b3IoMSwgbmV4dCkgfSk7XG4gIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBOQU1FICsgJyBJdGVyYXRvcicpO1xufTtcbiIsIi8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIChPKSB7XG4gIE8gPSB0b09iamVjdChPKTtcbiAgaWYgKGhhcyhPLCBJRV9QUk9UTykpIHJldHVybiBPW0lFX1BST1RPXTtcbiAgaWYgKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90byA6IG51bGw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyICRpdGVyQ3JlYXRlID0gcmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBCVUdHWSA9ICEoW10ua2V5cyAmJiAnbmV4dCcgaW4gW10ua2V5cygpKTsgLy8gU2FmYXJpIGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxudmFyIEZGX0lURVJBVE9SID0gJ0BAaXRlcmF0b3InO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQmFzZSwgTkFNRSwgQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKSB7XG4gICRpdGVyQ3JlYXRlKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcbiAgdmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uIChraW5kKSB7XG4gICAgaWYgKCFCVUdHWSAmJiBraW5kIGluIHByb3RvKSByZXR1cm4gcHJvdG9ba2luZF07XG4gICAgc3dpdGNoIChraW5kKSB7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgfTtcbiAgdmFyIFRBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgdmFyIERFRl9WQUxVRVMgPSBERUZBVUxUID09IFZBTFVFUztcbiAgdmFyIFZBTFVFU19CVUcgPSBmYWxzZTtcbiAgdmFyIHByb3RvID0gQmFzZS5wcm90b3R5cGU7XG4gIHZhciAkbmF0aXZlID0gcHJvdG9bSVRFUkFUT1JdIHx8IHByb3RvW0ZGX0lURVJBVE9SXSB8fCBERUZBVUxUICYmIHByb3RvW0RFRkFVTFRdO1xuICB2YXIgJGRlZmF1bHQgPSAkbmF0aXZlIHx8IGdldE1ldGhvZChERUZBVUxUKTtcbiAgdmFyICRlbnRyaWVzID0gREVGQVVMVCA/ICFERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoJ2VudHJpZXMnKSA6IHVuZGVmaW5lZDtcbiAgdmFyICRhbnlOYXRpdmUgPSBOQU1FID09ICdBcnJheScgPyBwcm90by5lbnRyaWVzIHx8ICRuYXRpdmUgOiAkbmF0aXZlO1xuICB2YXIgbWV0aG9kcywga2V5LCBJdGVyYXRvclByb3RvdHlwZTtcbiAgLy8gRml4IG5hdGl2ZVxuICBpZiAoJGFueU5hdGl2ZSkge1xuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoJGFueU5hdGl2ZS5jYWxsKG5ldyBCYXNlKCkpKTtcbiAgICBpZiAoSXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUgJiYgSXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JQcm90b3R5cGUsIFRBRywgdHJ1ZSk7XG4gICAgICAvLyBmaXggZm9yIHNvbWUgb2xkIGVuZ2luZXNcbiAgICAgIGlmICghTElCUkFSWSAmJiB0eXBlb2YgSXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdICE9ICdmdW5jdGlvbicpIGhpZGUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICB9XG4gIH1cbiAgLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRlxuICBpZiAoREVGX1ZBTFVFUyAmJiAkbmF0aXZlICYmICRuYXRpdmUubmFtZSAhPT0gVkFMVUVTKSB7XG4gICAgVkFMVUVTX0JVRyA9IHRydWU7XG4gICAgJGRlZmF1bHQgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiAkbmF0aXZlLmNhbGwodGhpcyk7IH07XG4gIH1cbiAgLy8gRGVmaW5lIGl0ZXJhdG9yXG4gIGlmICgoIUxJQlJBUlkgfHwgRk9SQ0VEKSAmJiAoQlVHR1kgfHwgVkFMVUVTX0JVRyB8fCAhcHJvdG9bSVRFUkFUT1JdKSkge1xuICAgIGhpZGUocHJvdG8sIElURVJBVE9SLCAkZGVmYXVsdCk7XG4gIH1cbiAgLy8gUGx1ZyBmb3IgbGlicmFyeVxuICBJdGVyYXRvcnNbTkFNRV0gPSAkZGVmYXVsdDtcbiAgSXRlcmF0b3JzW1RBR10gPSByZXR1cm5UaGlzO1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IERFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiAkZW50cmllc1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkgZm9yIChrZXkgaW4gbWV0aG9kcykge1xuICAgICAgaWYgKCEoa2V5IGluIHByb3RvKSkgcmVkZWZpbmUocHJvdG8sIGtleSwgbWV0aG9kc1trZXldKTtcbiAgICB9IGVsc2UgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoQlVHR1kgfHwgVkFMVUVTX0JVRyksIE5BTUUsIG1ldGhvZHMpO1xuICB9XG4gIHJldHVybiBtZXRob2RzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgc3RlcCA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcblxuLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcbi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgLy8ga2luZFxuLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGtpbmQgPSB0aGlzLl9rO1xuICB2YXIgaW5kZXggPSB0aGlzLl9pKys7XG4gIGlmICghTyB8fCBpbmRleCA+PSBPLmxlbmd0aCkge1xuICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHN0ZXAoMSk7XG4gIH1cbiAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBpbmRleCk7XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBPW2luZGV4XSk7XG4gIHJldHVybiBzdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KVxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG4iLCJ2YXIgJGl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgSVRFUkFUT1IgPSB3a3MoJ2l0ZXJhdG9yJyk7XG52YXIgVE9fU1RSSU5HX1RBRyA9IHdrcygndG9TdHJpbmdUYWcnKTtcbnZhciBBcnJheVZhbHVlcyA9IEl0ZXJhdG9ycy5BcnJheTtcblxudmFyIERPTUl0ZXJhYmxlcyA9IHtcbiAgQ1NTUnVsZUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBDU1NTdHlsZURlY2xhcmF0aW9uOiBmYWxzZSxcbiAgQ1NTVmFsdWVMaXN0OiBmYWxzZSxcbiAgQ2xpZW50UmVjdExpc3Q6IGZhbHNlLFxuICBET01SZWN0TGlzdDogZmFsc2UsXG4gIERPTVN0cmluZ0xpc3Q6IGZhbHNlLFxuICBET01Ub2tlbkxpc3Q6IHRydWUsXG4gIERhdGFUcmFuc2Zlckl0ZW1MaXN0OiBmYWxzZSxcbiAgRmlsZUxpc3Q6IGZhbHNlLFxuICBIVE1MQWxsQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgSFRNTEZvcm1FbGVtZW50OiBmYWxzZSxcbiAgSFRNTFNlbGVjdEVsZW1lbnQ6IGZhbHNlLFxuICBNZWRpYUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBNaW1lVHlwZUFycmF5OiBmYWxzZSxcbiAgTmFtZWROb2RlTWFwOiBmYWxzZSxcbiAgTm9kZUxpc3Q6IHRydWUsXG4gIFBhaW50UmVxdWVzdExpc3Q6IGZhbHNlLFxuICBQbHVnaW46IGZhbHNlLFxuICBQbHVnaW5BcnJheTogZmFsc2UsXG4gIFNWR0xlbmd0aExpc3Q6IGZhbHNlLFxuICBTVkdOdW1iZXJMaXN0OiBmYWxzZSxcbiAgU1ZHUGF0aFNlZ0xpc3Q6IGZhbHNlLFxuICBTVkdQb2ludExpc3Q6IGZhbHNlLFxuICBTVkdTdHJpbmdMaXN0OiBmYWxzZSxcbiAgU1ZHVHJhbnNmb3JtTGlzdDogZmFsc2UsXG4gIFNvdXJjZUJ1ZmZlckxpc3Q6IGZhbHNlLFxuICBTdHlsZVNoZWV0TGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIFRleHRUcmFja0N1ZUxpc3Q6IGZhbHNlLFxuICBUZXh0VHJhY2tMaXN0OiBmYWxzZSxcbiAgVG91Y2hMaXN0OiBmYWxzZVxufTtcblxuZm9yICh2YXIgY29sbGVjdGlvbnMgPSBnZXRLZXlzKERPTUl0ZXJhYmxlcyksIGkgPSAwOyBpIDwgY29sbGVjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgdmFyIE5BTUUgPSBjb2xsZWN0aW9uc1tpXTtcbiAgdmFyIGV4cGxpY2l0ID0gRE9NSXRlcmFibGVzW05BTUVdO1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIHByb3RvID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgdmFyIGtleTtcbiAgaWYgKHByb3RvKSB7XG4gICAgaWYgKCFwcm90b1tJVEVSQVRPUl0pIGhpZGUocHJvdG8sIElURVJBVE9SLCBBcnJheVZhbHVlcyk7XG4gICAgaWYgKCFwcm90b1tUT19TVFJJTkdfVEFHXSkgaGlkZShwcm90bywgVE9fU1RSSU5HX1RBRywgTkFNRSk7XG4gICAgSXRlcmF0b3JzW05BTUVdID0gQXJyYXlWYWx1ZXM7XG4gICAgaWYgKGV4cGxpY2l0KSBmb3IgKGtleSBpbiAkaXRlcmF0b3JzKSBpZiAoIXByb3RvW2tleV0pIHJlZGVmaW5lKHByb3RvLCBrZXksICRpdGVyYXRvcnNba2V5XSwgdHJ1ZSk7XG4gIH1cbn1cbiIsIi8vIGdldHRpbmcgdGFnIGZyb20gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG4vLyBFUzMgd3JvbmcgaGVyZVxudmFyIEFSRyA9IGNvZihmdW5jdGlvbiAoKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG52YXIgdHJ5R2V0ID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgTywgVCwgQjtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKFQgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRBRykpID09ICdzdHJpbmcnID8gVFxuICAgIC8vIGJ1aWx0aW5UYWcgY2FzZVxuICAgIDogQVJHID8gY29mKE8pXG4gICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xuICAgIDogKEIgPSBjb2YoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiBCO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgdGVzdCA9IHt9O1xudGVzdFtyZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKV0gPSAneic7XG5pZiAodGVzdCArICcnICE9ICdbb2JqZWN0IHpdJykge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKE9iamVjdC5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJztcbiAgfSwgdHJ1ZSk7XG59XG4iLCIvLyBtb3N0IE9iamVjdCBtZXRob2RzIGJ5IEVTNiBzaG91bGQgYWNjZXB0IHByaW1pdGl2ZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGV4ZWMpIHtcbiAgdmFyIGZuID0gKGNvcmUuT2JqZWN0IHx8IHt9KVtLRVldIHx8IE9iamVjdFtLRVldO1xuICB2YXIgZXhwID0ge307XG4gIGV4cFtLRVldID0gZXhlYyhmbik7XG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkgeyBmbigxKTsgfSksICdPYmplY3QnLCBleHApO1xufTtcbiIsIi8vIDE5LjEuMi4xNCBPYmplY3Qua2V5cyhPKVxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2tleXMnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBrZXlzKGl0KSB7XG4gICAgcmV0dXJuICRrZXlzKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTtcbiIsImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSAnZXZlbnRlbWl0dGVyMyc7XG5cbmxldCBldmVudEluc3RhbmNlO1xuaWYgKHdpbmRvdy5ldmVudEluc3RhbmNlKSB7XG4gIGV2ZW50SW5zdGFuY2UgPSB3aW5kb3cuZXZlbnRJbnN0YW5jZTtcbn0gZWxzZSB7XG4gIGV2ZW50SW5zdGFuY2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0U2hhbGxvd01vZGlmaWVkKHByZXYsIG5leHQpIHtcbiAgaWYgKFxuICAgIHByZXYgPT0gbnVsbCB8fFxuICAgIG5leHQgPT0gbnVsbCB8fFxuICAgIHR5cGVvZiBwcmV2ICE9PSAnb2JqZWN0JyB8fFxuICAgIHR5cGVvZiBuZXh0ICE9PSAnb2JqZWN0J1xuICApIHtcbiAgICByZXR1cm4gcHJldiAhPT0gbmV4dDtcbiAgfVxuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMocHJldik7XG4gIGlmIChrZXlzLmxlbmd0aCAhPT0gT2JqZWN0LmtleXMobmV4dCkubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgbGV0IGtleTtcbiAgZm9yIChsZXQgaSA9IGtleXMubGVuZ3RoIC0gMTsgaSA+PSAwLCAoa2V5ID0ga2V5c1tpXSk7IGktLSkge1xuICAgIGlmIChuZXh0W2tleV0gIT09IHByZXZba2V5XSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLy8g5YiG5Y+RcmVhY3RpdmVNaXhpbuWHveaVsFxuZnVuY3Rpb24gcGF0Y2godGFyZ2V0LCBmdW5jTmFtZSwgcnVuTWl4aW5GaXJzdCA9IGZhbHNlKSB7XG4gIGNvbnN0IGJhc2UgPSB0YXJnZXRbZnVuY05hbWVdO1xuICBjb25zdCBtaXhpbkZ1bmMgPSByZWFjdGl2ZU1peGluW2Z1bmNOYW1lXTtcbiAgY29uc3QgZiA9ICFiYXNlIC8vdGFyZ2V05Lit5rKh5pyJ55qE6K+d5L2/55SobWl4aW7vvIzmnInnmoTor53liKTmlq3ml7ZtaXhpbuS8mOWFiOi/mOaYr2Jhc2XkvJjlhYhcbiAgICA/IG1peGluRnVuY1xuICAgIDogcnVuTWl4aW5GaXJzdCA9PT0gdHJ1ZVxuICAgID8gZnVuY3Rpb24oKSB7XG4gICAgICAgIG1peGluRnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICBiYXNlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgOiBmdW5jdGlvbigpIHtcbiAgICAgICAgYmFzZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICBtaXhpbkZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gIHRhcmdldFtmdW5jTmFtZV0gPSBmO1xufVxuXG5jb25zdCByZWFjdGl2ZU1peGluID0ge1xuICBkaXNwYXRjaDogZnVuY3Rpb24oYWN0aW9uKSB7XG4gICAgZXZlbnRJbnN0YW5jZS5lbWl0KGFjdGlvbi50eXBlLCBhY3Rpb24pO1xuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxNb3VudDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMub25FdmVudEFjdGlvbikge1xuICAgICAgZm9yIChsZXQgZSBvZiB0aGlzLmV2ZW50cykge1xuICAgICAgICBldmVudEluc3RhbmNlLm9uKFxuICAgICAgICAgIGUsXG4gICAgICAgICAgKHRoaXMubGlzdGVuZXIgPSBhY3Rpb24gPT4ge1xuICAgICAgICAgICAgdGhpcy5vbkV2ZW50QWN0aW9uKGFjdGlvbik7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnYWN0aW9uOicsIGFjdGlvbik7XG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLm9uRXZlbnRBY3Rpb24pIHtcbiAgICAgIGZvciAobGV0IGUgb2YgdGhpcy5ldmVudHMpIHtcbiAgICAgICAgZXZlbnRJbnN0YW5jZS5yZW1vdmVMaXN0ZW5lcihlLCB0aGlzLmxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlOiBmdW5jdGlvbihuZXh0UHJvcHMsIG5leHRTdGF0ZSkge1xuICAgIGlmICh0aGlzLnN0YXRlICE9PSBuZXh0U3RhdGUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gaXNPYmplY3RTaGFsbG93TW9kaWZpZWQodGhpcy5wcm9wcywgbmV4dFByb3BzKTtcbiAgfVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIG9ic2VydmVyKGV2ZW50cyA9IFtdKSB7XG4gIHJldHVybiBmdW5jdGlvbihhcmcxKSB7XG4gICAgLy8g5peg54q25oCB57uE5Lu2XG4gICAgY29uc3QgY29tcG9uZW50Q2xhc3MgPSBhcmcxO1xuICAgIGlmIChcbiAgICAgIHR5cGVvZiBjb21wb25lbnRDbGFzcyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgKCFjb21wb25lbnRDbGFzcy5wcm90b3R5cGUgfHwgIWNvbXBvbmVudENsYXNzLnByb3RvdHlwZS5yZW5kZXIpICYmXG4gICAgICAhY29tcG9uZW50Q2xhc3MuaXNSZWFjdENsYXNzICYmXG4gICAgICAhQ29tcG9uZW50LmlzUHJvdG90eXBlT2YoY29tcG9uZW50Q2xhc3MpXG4gICAgKSB7XG4gICAgICByZXR1cm4gb2JzZXJ2ZXIoXG4gICAgICAgIGNsYXNzIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICAgICAgICBzdGF0aWMgZGlzcGxheU5hbWUgPVxuICAgICAgICAgICAgY29tcG9uZW50Q2xhc3MuZGlzcGxheU5hbWUgfHwgY29tcG9uZW50Q2xhc3MubmFtZTtcbiAgICAgICAgICBzdGF0aWMgY29udGV4dFR5cGVzID0gY29tcG9uZW50Q2xhc3MuY29udGV4dFR5cGVzO1xuICAgICAgICAgIHN0YXRpYyBwcm9wVHlwZXMgPSBjb21wb25lbnRDbGFzcy5wcm9wVHlwZXM7XG4gICAgICAgICAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IGNvbXBvbmVudENsYXNzLmRlZmF1bHRQcm9wcztcbiAgICAgICAgICBzdGF0aWMgZXZlbnRzID0gZXZlbnRzO1xuICAgICAgICAgIHJlbmRlcigpIHtcbiAgICAgICAgICAgIHJldHVybiBjb21wb25lbnRDbGFzcy5jYWxsKHRoaXMsIHRoaXMucHJvcHMsIHRoaXMuY29udGV4dCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICghY29tcG9uZW50Q2xhc3MpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcign6K+35Lyg5YWl5ZCI5rOV55qE57uE5Lu257uR5a6ab2JzZXJ2ZXInKTtcbiAgICB9XG5cbiAgICBjb25zdCB0YXJnZXQgPSBjb21wb25lbnRDbGFzcy5wcm90b3R5cGUgfHwgY29tcG9uZW50Q2xhc3M7XG4gICAgdGFyZ2V0LmV2ZW50cyA9IGV2ZW50cztcbiAgICBtaXhpbkxpZmVjeWNsZUV2ZW50cyh0YXJnZXQpO1xuICAgIHJldHVybiBjb21wb25lbnRDbGFzcztcbiAgfTtcbn1cblxuZnVuY3Rpb24gbWl4aW5MaWZlY3ljbGVFdmVudHModGFyZ2V0KSB7XG4gIHBhdGNoKHRhcmdldCwgJ2NvbXBvbmVudFdpbGxNb3VudCcsIHRydWUpO1xuICBbJ2Rpc3BhdGNoJywgJ2NvbXBvbmVudFdpbGxVbm1vdW50J10uZm9yRWFjaChmdW5jdGlvbihmdW5jTmFtZSkge1xuICAgIHBhdGNoKHRhcmdldCwgZnVuY05hbWUpO1xuICB9KTtcbiAgaWYgKCF0YXJnZXQuc2hvdWxkQ29tcG9uZW50VXBkYXRlKSB7XG4gICAgdGFyZ2V0LnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IHJlYWN0aXZlTWl4aW4uc2hvdWxkQ29tcG9uZW50VXBkYXRlO1xuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5XG4gICwgcHJlZml4ID0gJ34nO1xuXG4vKipcbiAqIENvbnN0cnVjdG9yIHRvIGNyZWF0ZSBhIHN0b3JhZ2UgZm9yIG91ciBgRUVgIG9iamVjdHMuXG4gKiBBbiBgRXZlbnRzYCBpbnN0YW5jZSBpcyBhIHBsYWluIG9iamVjdCB3aG9zZSBwcm9wZXJ0aWVzIGFyZSBldmVudCBuYW1lcy5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIEV2ZW50cygpIHt9XG5cbi8vXG4vLyBXZSB0cnkgdG8gbm90IGluaGVyaXQgZnJvbSBgT2JqZWN0LnByb3RvdHlwZWAuIEluIHNvbWUgZW5naW5lcyBjcmVhdGluZyBhblxuLy8gaW5zdGFuY2UgaW4gdGhpcyB3YXkgaXMgZmFzdGVyIHRoYW4gY2FsbGluZyBgT2JqZWN0LmNyZWF0ZShudWxsKWAgZGlyZWN0bHkuXG4vLyBJZiBgT2JqZWN0LmNyZWF0ZShudWxsKWAgaXMgbm90IHN1cHBvcnRlZCB3ZSBwcmVmaXggdGhlIGV2ZW50IG5hbWVzIHdpdGggYVxuLy8gY2hhcmFjdGVyIHRvIG1ha2Ugc3VyZSB0aGF0IHRoZSBidWlsdC1pbiBvYmplY3QgcHJvcGVydGllcyBhcmUgbm90XG4vLyBvdmVycmlkZGVuIG9yIHVzZWQgYXMgYW4gYXR0YWNrIHZlY3Rvci5cbi8vXG5pZiAoT2JqZWN0LmNyZWF0ZSkge1xuICBFdmVudHMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAvL1xuICAvLyBUaGlzIGhhY2sgaXMgbmVlZGVkIGJlY2F1c2UgdGhlIGBfX3Byb3RvX19gIHByb3BlcnR5IGlzIHN0aWxsIGluaGVyaXRlZCBpblxuICAvLyBzb21lIG9sZCBicm93c2VycyBsaWtlIEFuZHJvaWQgNCwgaVBob25lIDUuMSwgT3BlcmEgMTEgYW5kIFNhZmFyaSA1LlxuICAvL1xuICBpZiAoIW5ldyBFdmVudHMoKS5fX3Byb3RvX18pIHByZWZpeCA9IGZhbHNlO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudGF0aW9uIG9mIGEgc2luZ2xlIGV2ZW50IGxpc3RlbmVyLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gY29udGV4dCBUaGUgY29udGV4dCB0byBpbnZva2UgdGhlIGxpc3RlbmVyIHdpdGguXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvbmNlPWZhbHNlXSBTcGVjaWZ5IGlmIHRoZSBsaXN0ZW5lciBpcyBhIG9uZS10aW1lIGxpc3RlbmVyLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBFRShmbiwgY29udGV4dCwgb25jZSkge1xuICB0aGlzLmZuID0gZm47XG4gIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMub25jZSA9IG9uY2UgfHwgZmFsc2U7XG59XG5cbi8qKlxuICogQWRkIGEgbGlzdGVuZXIgZm9yIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHtFdmVudEVtaXR0ZXJ9IGVtaXR0ZXIgUmVmZXJlbmNlIHRvIHRoZSBgRXZlbnRFbWl0dGVyYCBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gY29udGV4dCBUaGUgY29udGV4dCB0byBpbnZva2UgdGhlIGxpc3RlbmVyIHdpdGguXG4gKiBAcGFyYW0ge0Jvb2xlYW59IG9uY2UgU3BlY2lmeSBpZiB0aGUgbGlzdGVuZXIgaXMgYSBvbmUtdGltZSBsaXN0ZW5lci5cbiAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBhZGRMaXN0ZW5lcihlbWl0dGVyLCBldmVudCwgZm4sIGNvbnRleHQsIG9uY2UpIHtcbiAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lciA9IG5ldyBFRShmbiwgY29udGV4dCB8fCBlbWl0dGVyLCBvbmNlKVxuICAgICwgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudDtcblxuICBpZiAoIWVtaXR0ZXIuX2V2ZW50c1tldnRdKSBlbWl0dGVyLl9ldmVudHNbZXZ0XSA9IGxpc3RlbmVyLCBlbWl0dGVyLl9ldmVudHNDb3VudCsrO1xuICBlbHNlIGlmICghZW1pdHRlci5fZXZlbnRzW2V2dF0uZm4pIGVtaXR0ZXIuX2V2ZW50c1tldnRdLnB1c2gobGlzdGVuZXIpO1xuICBlbHNlIGVtaXR0ZXIuX2V2ZW50c1tldnRdID0gW2VtaXR0ZXIuX2V2ZW50c1tldnRdLCBsaXN0ZW5lcl07XG5cbiAgcmV0dXJuIGVtaXR0ZXI7XG59XG5cbi8qKlxuICogQ2xlYXIgZXZlbnQgYnkgbmFtZS5cbiAqXG4gKiBAcGFyYW0ge0V2ZW50RW1pdHRlcn0gZW1pdHRlciBSZWZlcmVuY2UgdG8gdGhlIGBFdmVudEVtaXR0ZXJgIGluc3RhbmNlLlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2dCBUaGUgRXZlbnQgbmFtZS5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNsZWFyRXZlbnQoZW1pdHRlciwgZXZ0KSB7XG4gIGlmICgtLWVtaXR0ZXIuX2V2ZW50c0NvdW50ID09PSAwKSBlbWl0dGVyLl9ldmVudHMgPSBuZXcgRXZlbnRzKCk7XG4gIGVsc2UgZGVsZXRlIGVtaXR0ZXIuX2V2ZW50c1tldnRdO1xufVxuXG4vKipcbiAqIE1pbmltYWwgYEV2ZW50RW1pdHRlcmAgaW50ZXJmYWNlIHRoYXQgaXMgbW9sZGVkIGFnYWluc3QgdGhlIE5vZGUuanNcbiAqIGBFdmVudEVtaXR0ZXJgIGludGVyZmFjZS5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xuICB0aGlzLl9ldmVudHMgPSBuZXcgRXZlbnRzKCk7XG4gIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbn1cblxuLyoqXG4gKiBSZXR1cm4gYW4gYXJyYXkgbGlzdGluZyB0aGUgZXZlbnRzIGZvciB3aGljaCB0aGUgZW1pdHRlciBoYXMgcmVnaXN0ZXJlZFxuICogbGlzdGVuZXJzLlxuICpcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5ldmVudE5hbWVzID0gZnVuY3Rpb24gZXZlbnROYW1lcygpIHtcbiAgdmFyIG5hbWVzID0gW11cbiAgICAsIGV2ZW50c1xuICAgICwgbmFtZTtcblxuICBpZiAodGhpcy5fZXZlbnRzQ291bnQgPT09IDApIHJldHVybiBuYW1lcztcblxuICBmb3IgKG5hbWUgaW4gKGV2ZW50cyA9IHRoaXMuX2V2ZW50cykpIHtcbiAgICBpZiAoaGFzLmNhbGwoZXZlbnRzLCBuYW1lKSkgbmFtZXMucHVzaChwcmVmaXggPyBuYW1lLnNsaWNlKDEpIDogbmFtZSk7XG4gIH1cblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHJldHVybiBuYW1lcy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhldmVudHMpKTtcbiAgfVxuXG4gIHJldHVybiBuYW1lcztcbn07XG5cbi8qKlxuICogUmV0dXJuIHRoZSBsaXN0ZW5lcnMgcmVnaXN0ZXJlZCBmb3IgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFRoZSByZWdpc3RlcmVkIGxpc3RlbmVycy5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbiBsaXN0ZW5lcnMoZXZlbnQpIHtcbiAgdmFyIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnRcbiAgICAsIGhhbmRsZXJzID0gdGhpcy5fZXZlbnRzW2V2dF07XG5cbiAgaWYgKCFoYW5kbGVycykgcmV0dXJuIFtdO1xuICBpZiAoaGFuZGxlcnMuZm4pIHJldHVybiBbaGFuZGxlcnMuZm5dO1xuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gaGFuZGxlcnMubGVuZ3RoLCBlZSA9IG5ldyBBcnJheShsKTsgaSA8IGw7IGkrKykge1xuICAgIGVlW2ldID0gaGFuZGxlcnNbaV0uZm47XG4gIH1cblxuICByZXR1cm4gZWU7XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgbnVtYmVyIG9mIGxpc3RlbmVycyBsaXN0ZW5pbmcgdG8gYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgbnVtYmVyIG9mIGxpc3RlbmVycy5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24gbGlzdGVuZXJDb3VudChldmVudCkge1xuICB2YXIgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudFxuICAgICwgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW2V2dF07XG5cbiAgaWYgKCFsaXN0ZW5lcnMpIHJldHVybiAwO1xuICBpZiAobGlzdGVuZXJzLmZuKSByZXR1cm4gMTtcbiAgcmV0dXJuIGxpc3RlbmVycy5sZW5ndGg7XG59O1xuXG4vKipcbiAqIENhbGxzIGVhY2ggb2YgdGhlIGxpc3RlbmVycyByZWdpc3RlcmVkIGZvciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBgdHJ1ZWAgaWYgdGhlIGV2ZW50IGhhZCBsaXN0ZW5lcnMsIGVsc2UgYGZhbHNlYC5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdChldmVudCwgYTEsIGEyLCBhMywgYTQsIGE1KSB7XG4gIHZhciBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50O1xuXG4gIGlmICghdGhpcy5fZXZlbnRzW2V2dF0pIHJldHVybiBmYWxzZTtcblxuICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW2V2dF1cbiAgICAsIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAsIGFyZ3NcbiAgICAsIGk7XG5cbiAgaWYgKGxpc3RlbmVycy5mbikge1xuICAgIGlmIChsaXN0ZW5lcnMub25jZSkgdGhpcy5yZW1vdmVMaXN0ZW5lcihldmVudCwgbGlzdGVuZXJzLmZuLCB1bmRlZmluZWQsIHRydWUpO1xuXG4gICAgc3dpdGNoIChsZW4pIHtcbiAgICAgIGNhc2UgMTogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0KSwgdHJ1ZTtcbiAgICAgIGNhc2UgMjogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSksIHRydWU7XG4gICAgICBjYXNlIDM6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyKSwgdHJ1ZTtcbiAgICAgIGNhc2UgNDogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSwgYTIsIGEzKSwgdHJ1ZTtcbiAgICAgIGNhc2UgNTogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSwgYTIsIGEzLCBhNCksIHRydWU7XG4gICAgICBjYXNlIDY6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyLCBhMywgYTQsIGE1KSwgdHJ1ZTtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAxLCBhcmdzID0gbmV3IEFycmF5KGxlbiAtMSk7IGkgPCBsZW47IGkrKykge1xuICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLmZuLmFwcGx5KGxpc3RlbmVycy5jb250ZXh0LCBhcmdzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbGVuZ3RoID0gbGlzdGVuZXJzLmxlbmd0aFxuICAgICAgLCBqO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAobGlzdGVuZXJzW2ldLm9uY2UpIHRoaXMucmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyc1tpXS5mbiwgdW5kZWZpbmVkLCB0cnVlKTtcblxuICAgICAgc3dpdGNoIChsZW4pIHtcbiAgICAgICAgY2FzZSAxOiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCk7IGJyZWFrO1xuICAgICAgICBjYXNlIDI6IGxpc3RlbmVyc1tpXS5mbi5jYWxsKGxpc3RlbmVyc1tpXS5jb250ZXh0LCBhMSk7IGJyZWFrO1xuICAgICAgICBjYXNlIDM6IGxpc3RlbmVyc1tpXS5mbi5jYWxsKGxpc3RlbmVyc1tpXS5jb250ZXh0LCBhMSwgYTIpOyBicmVhaztcbiAgICAgICAgY2FzZSA0OiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCwgYTEsIGEyLCBhMyk7IGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGlmICghYXJncykgZm9yIChqID0gMSwgYXJncyA9IG5ldyBBcnJheShsZW4gLTEpOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaiAtIDFdID0gYXJndW1lbnRzW2pdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGxpc3RlbmVyc1tpXS5mbi5hcHBseShsaXN0ZW5lcnNbaV0uY29udGV4dCwgYXJncyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vKipcbiAqIEFkZCBhIGxpc3RlbmVyIGZvciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gW2NvbnRleHQ9dGhpc10gVGhlIGNvbnRleHQgdG8gaW52b2tlIHRoZSBsaXN0ZW5lciB3aXRoLlxuICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gYHRoaXNgLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gb24oZXZlbnQsIGZuLCBjb250ZXh0KSB7XG4gIHJldHVybiBhZGRMaXN0ZW5lcih0aGlzLCBldmVudCwgZm4sIGNvbnRleHQsIGZhbHNlKTtcbn07XG5cbi8qKlxuICogQWRkIGEgb25lLXRpbWUgbGlzdGVuZXIgZm9yIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGxpc3RlbmVyIGZ1bmN0aW9uLlxuICogQHBhcmFtIHsqfSBbY29udGV4dD10aGlzXSBUaGUgY29udGV4dCB0byBpbnZva2UgdGhlIGxpc3RlbmVyIHdpdGguXG4gKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfSBgdGhpc2AuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uIG9uY2UoZXZlbnQsIGZuLCBjb250ZXh0KSB7XG4gIHJldHVybiBhZGRMaXN0ZW5lcih0aGlzLCBldmVudCwgZm4sIGNvbnRleHQsIHRydWUpO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgdGhlIGxpc3RlbmVycyBvZiBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIE9ubHkgcmVtb3ZlIHRoZSBsaXN0ZW5lcnMgdGhhdCBtYXRjaCB0aGlzIGZ1bmN0aW9uLlxuICogQHBhcmFtIHsqfSBjb250ZXh0IE9ubHkgcmVtb3ZlIHRoZSBsaXN0ZW5lcnMgdGhhdCBoYXZlIHRoaXMgY29udGV4dC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gb25jZSBPbmx5IHJlbW92ZSBvbmUtdGltZSBsaXN0ZW5lcnMuXG4gKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfSBgdGhpc2AuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcihldmVudCwgZm4sIGNvbnRleHQsIG9uY2UpIHtcbiAgdmFyIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnQ7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHNbZXZ0XSkgcmV0dXJuIHRoaXM7XG4gIGlmICghZm4pIHtcbiAgICBjbGVhckV2ZW50KHRoaXMsIGV2dCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW2V2dF07XG5cbiAgaWYgKGxpc3RlbmVycy5mbikge1xuICAgIGlmIChcbiAgICAgIGxpc3RlbmVycy5mbiA9PT0gZm4gJiZcbiAgICAgICghb25jZSB8fCBsaXN0ZW5lcnMub25jZSkgJiZcbiAgICAgICghY29udGV4dCB8fCBsaXN0ZW5lcnMuY29udGV4dCA9PT0gY29udGV4dClcbiAgICApIHtcbiAgICAgIGNsZWFyRXZlbnQodGhpcywgZXZ0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGV2ZW50cyA9IFtdLCBsZW5ndGggPSBsaXN0ZW5lcnMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChcbiAgICAgICAgbGlzdGVuZXJzW2ldLmZuICE9PSBmbiB8fFxuICAgICAgICAob25jZSAmJiAhbGlzdGVuZXJzW2ldLm9uY2UpIHx8XG4gICAgICAgIChjb250ZXh0ICYmIGxpc3RlbmVyc1tpXS5jb250ZXh0ICE9PSBjb250ZXh0KVxuICAgICAgKSB7XG4gICAgICAgIGV2ZW50cy5wdXNoKGxpc3RlbmVyc1tpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy9cbiAgICAvLyBSZXNldCB0aGUgYXJyYXksIG9yIHJlbW92ZSBpdCBjb21wbGV0ZWx5IGlmIHdlIGhhdmUgbm8gbW9yZSBsaXN0ZW5lcnMuXG4gICAgLy9cbiAgICBpZiAoZXZlbnRzLmxlbmd0aCkgdGhpcy5fZXZlbnRzW2V2dF0gPSBldmVudHMubGVuZ3RoID09PSAxID8gZXZlbnRzWzBdIDogZXZlbnRzO1xuICAgIGVsc2UgY2xlYXJFdmVudCh0aGlzLCBldnQpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbGwgbGlzdGVuZXJzLCBvciB0aG9zZSBvZiB0aGUgc3BlY2lmaWVkIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBbZXZlbnRdIFRoZSBldmVudCBuYW1lLlxuICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gYHRoaXNgLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9IGZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVycyhldmVudCkge1xuICB2YXIgZXZ0O1xuXG4gIGlmIChldmVudCkge1xuICAgIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnQ7XG4gICAgaWYgKHRoaXMuX2V2ZW50c1tldnRdKSBjbGVhckV2ZW50KHRoaXMsIGV2dCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50cygpO1xuICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLy9cbi8vIEFsaWFzIG1ldGhvZHMgbmFtZXMgYmVjYXVzZSBwZW9wbGUgcm9sbCBsaWtlIHRoYXQuXG4vL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vZmYgPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUub247XG5cbi8vXG4vLyBFeHBvc2UgdGhlIHByZWZpeC5cbi8vXG5FdmVudEVtaXR0ZXIucHJlZml4ZWQgPSBwcmVmaXg7XG5cbi8vXG4vLyBBbGxvdyBgRXZlbnRFbWl0dGVyYCB0byBiZSBpbXBvcnRlZCBhcyBtb2R1bGUgbmFtZXNwYWNlLlxuLy9cbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbi8vXG4vLyBFeHBvc2UgdGhlIG1vZHVsZS5cbi8vXG5pZiAoJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBtb2R1bGUpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjBcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGU9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsZj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxnPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksaz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGw9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxtPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxuPWI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHA9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMscT1iP1xuU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6NjAxMjAscj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LHQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNix2PWI/U3ltYm9sLmZvcihcInJlYWN0LmJsb2NrXCIpOjYwMTIxLHc9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnVuZGFtZW50YWxcIik6NjAxMTcseD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5yZXNwb25kZXJcIik6NjAxMTgseT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTo2MDExOTtcbmZ1bmN0aW9uIHooYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHU9YS4kJHR5cGVvZjtzd2l0Y2godSl7Y2FzZSBjOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGw6Y2FzZSBtOmNhc2UgZTpjYXNlIGc6Y2FzZSBmOmNhc2UgcDpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBrOmNhc2UgbjpjYXNlIHQ6Y2FzZSByOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB1fX1jYXNlIGQ6cmV0dXJuIHV9fX1mdW5jdGlvbiBBKGEpe3JldHVybiB6KGEpPT09bX1leHBvcnRzLkFzeW5jTW9kZT1sO2V4cG9ydHMuQ29uY3VycmVudE1vZGU9bTtleHBvcnRzLkNvbnRleHRDb25zdW1lcj1rO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWg7ZXhwb3J0cy5FbGVtZW50PWM7ZXhwb3J0cy5Gb3J3YXJkUmVmPW47ZXhwb3J0cy5GcmFnbWVudD1lO2V4cG9ydHMuTGF6eT10O2V4cG9ydHMuTWVtbz1yO2V4cG9ydHMuUG9ydGFsPWQ7XG5leHBvcnRzLlByb2ZpbGVyPWc7ZXhwb3J0cy5TdHJpY3RNb2RlPWY7ZXhwb3J0cy5TdXNwZW5zZT1wO2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIEEoYSl8fHooYSk9PT1sfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9QTtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09a307ZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWh9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09dH07XG5leHBvcnRzLmlzTWVtbz1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXJ9O2V4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1kfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1nfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWZ9O2V4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXB9O1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWV8fGE9PT1tfHxhPT09Z3x8YT09PWZ8fGE9PT1wfHxhPT09cXx8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT10fHxhLiQkdHlwZW9mPT09cnx8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1rfHxhLiQkdHlwZW9mPT09bnx8YS4kJHR5cGVvZj09PXd8fGEuJCR0eXBlb2Y9PT14fHxhLiQkdHlwZW9mPT09eXx8YS4kJHR5cGVvZj09PXYpfTtleHBvcnRzLnR5cGVPZj16O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcbnZhciBhc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG52YXIgY2hlY2tQcm9wVHlwZXMgPSByZXF1aXJlKCcuL2NoZWNrUHJvcFR5cGVzJyk7XG5cbnZhciBoYXMgPSBGdW5jdGlvbi5jYWxsLmJpbmQoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSk7XG52YXIgcHJpbnRXYXJuaW5nID0gZnVuY3Rpb24oKSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgcHJpbnRXYXJuaW5nID0gZnVuY3Rpb24odGV4dCkge1xuICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgKyB0ZXh0O1xuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAvLyAtLS0gV2VsY29tZSB0byBkZWJ1Z2dpbmcgUmVhY3QgLS0tXG4gICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIH0gY2F0Y2ggKHgpIHt9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb25UaGF0UmV0dXJuc051bGwoKSB7XG4gIHJldHVybiBudWxsO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGlzVmFsaWRFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKSB7XG4gIC8qIGdsb2JhbCBTeW1ib2wgKi9cbiAgdmFyIElURVJBVE9SX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLml0ZXJhdG9yO1xuICB2YXIgRkFVWF9JVEVSQVRPUl9TWU1CT0wgPSAnQEBpdGVyYXRvcic7IC8vIEJlZm9yZSBTeW1ib2wgc3BlYy5cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgaXRlcmF0b3IgbWV0aG9kIGZ1bmN0aW9uIGNvbnRhaW5lZCBvbiB0aGUgaXRlcmFibGUgb2JqZWN0LlxuICAgKlxuICAgKiBCZSBzdXJlIHRvIGludm9rZSB0aGUgZnVuY3Rpb24gd2l0aCB0aGUgaXRlcmFibGUgYXMgY29udGV4dDpcbiAgICpcbiAgICogICAgIHZhciBpdGVyYXRvckZuID0gZ2V0SXRlcmF0b3JGbihteUl0ZXJhYmxlKTtcbiAgICogICAgIGlmIChpdGVyYXRvckZuKSB7XG4gICAqICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yRm4uY2FsbChteUl0ZXJhYmxlKTtcbiAgICogICAgICAgLi4uXG4gICAqICAgICB9XG4gICAqXG4gICAqIEBwYXJhbSB7P29iamVjdH0gbWF5YmVJdGVyYWJsZVxuICAgKiBAcmV0dXJuIHs/ZnVuY3Rpb259XG4gICAqL1xuICBmdW5jdGlvbiBnZXRJdGVyYXRvckZuKG1heWJlSXRlcmFibGUpIHtcbiAgICB2YXIgaXRlcmF0b3JGbiA9IG1heWJlSXRlcmFibGUgJiYgKElURVJBVE9SX1NZTUJPTCAmJiBtYXliZUl0ZXJhYmxlW0lURVJBVE9SX1NZTUJPTF0gfHwgbWF5YmVJdGVyYWJsZVtGQVVYX0lURVJBVE9SX1NZTUJPTF0pO1xuICAgIGlmICh0eXBlb2YgaXRlcmF0b3JGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIGl0ZXJhdG9yRm47XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENvbGxlY3Rpb24gb2YgbWV0aG9kcyB0aGF0IGFsbG93IGRlY2xhcmF0aW9uIGFuZCB2YWxpZGF0aW9uIG9mIHByb3BzIHRoYXQgYXJlXG4gICAqIHN1cHBsaWVkIHRvIFJlYWN0IGNvbXBvbmVudHMuIEV4YW1wbGUgdXNhZ2U6XG4gICAqXG4gICAqICAgdmFyIFByb3BzID0gcmVxdWlyZSgnUmVhY3RQcm9wVHlwZXMnKTtcbiAgICogICB2YXIgTXlBcnRpY2xlID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICAgKiAgICAgcHJvcFR5cGVzOiB7XG4gICAqICAgICAgIC8vIEFuIG9wdGlvbmFsIHN0cmluZyBwcm9wIG5hbWVkIFwiZGVzY3JpcHRpb25cIi5cbiAgICogICAgICAgZGVzY3JpcHRpb246IFByb3BzLnN0cmluZyxcbiAgICpcbiAgICogICAgICAgLy8gQSByZXF1aXJlZCBlbnVtIHByb3AgbmFtZWQgXCJjYXRlZ29yeVwiLlxuICAgKiAgICAgICBjYXRlZ29yeTogUHJvcHMub25lT2YoWydOZXdzJywnUGhvdG9zJ10pLmlzUmVxdWlyZWQsXG4gICAqXG4gICAqICAgICAgIC8vIEEgcHJvcCBuYW1lZCBcImRpYWxvZ1wiIHRoYXQgcmVxdWlyZXMgYW4gaW5zdGFuY2Ugb2YgRGlhbG9nLlxuICAgKiAgICAgICBkaWFsb2c6IFByb3BzLmluc3RhbmNlT2YoRGlhbG9nKS5pc1JlcXVpcmVkXG4gICAqICAgICB9LFxuICAgKiAgICAgcmVuZGVyOiBmdW5jdGlvbigpIHsgLi4uIH1cbiAgICogICB9KTtcbiAgICpcbiAgICogQSBtb3JlIGZvcm1hbCBzcGVjaWZpY2F0aW9uIG9mIGhvdyB0aGVzZSBtZXRob2RzIGFyZSB1c2VkOlxuICAgKlxuICAgKiAgIHR5cGUgOj0gYXJyYXl8Ym9vbHxmdW5jfG9iamVjdHxudW1iZXJ8c3RyaW5nfG9uZU9mKFsuLi5dKXxpbnN0YW5jZU9mKC4uLilcbiAgICogICBkZWNsIDo9IFJlYWN0UHJvcFR5cGVzLnt0eXBlfSguaXNSZXF1aXJlZCk/XG4gICAqXG4gICAqIEVhY2ggYW5kIGV2ZXJ5IGRlY2xhcmF0aW9uIHByb2R1Y2VzIGEgZnVuY3Rpb24gd2l0aCB0aGUgc2FtZSBzaWduYXR1cmUuIFRoaXNcbiAgICogYWxsb3dzIHRoZSBjcmVhdGlvbiBvZiBjdXN0b20gdmFsaWRhdGlvbiBmdW5jdGlvbnMuIEZvciBleGFtcGxlOlxuICAgKlxuICAgKiAgdmFyIE15TGluayA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgICogICAgcHJvcFR5cGVzOiB7XG4gICAqICAgICAgLy8gQW4gb3B0aW9uYWwgc3RyaW5nIG9yIFVSSSBwcm9wIG5hbWVkIFwiaHJlZlwiLlxuICAgKiAgICAgIGhyZWY6IGZ1bmN0aW9uKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSkge1xuICAgKiAgICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICogICAgICAgIGlmIChwcm9wVmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgcHJvcFZhbHVlICE9PSAnc3RyaW5nJyAmJlxuICAgKiAgICAgICAgICAgICEocHJvcFZhbHVlIGluc3RhbmNlb2YgVVJJKSkge1xuICAgKiAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgKiAgICAgICAgICAgICdFeHBlY3RlZCBhIHN0cmluZyBvciBhbiBVUkkgZm9yICcgKyBwcm9wTmFtZSArICcgaW4gJyArXG4gICAqICAgICAgICAgICAgY29tcG9uZW50TmFtZVxuICAgKiAgICAgICAgICApO1xuICAgKiAgICAgICAgfVxuICAgKiAgICAgIH1cbiAgICogICAgfSxcbiAgICogICAgcmVuZGVyOiBmdW5jdGlvbigpIHsuLi59XG4gICAqICB9KTtcbiAgICpcbiAgICogQGludGVybmFsXG4gICAqL1xuXG4gIHZhciBBTk9OWU1PVVMgPSAnPDxhbm9ueW1vdXM+Pic7XG5cbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ2FycmF5JyksXG4gICAgYm9vbDogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ2Jvb2xlYW4nKSxcbiAgICBmdW5jOiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignZnVuY3Rpb24nKSxcbiAgICBudW1iZXI6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdudW1iZXInKSxcbiAgICBvYmplY3Q6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdvYmplY3QnKSxcbiAgICBzdHJpbmc6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdzdHJpbmcnKSxcbiAgICBzeW1ib2w6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdzeW1ib2wnKSxcblxuICAgIGFueTogY3JlYXRlQW55VHlwZUNoZWNrZXIoKSxcbiAgICBhcnJheU9mOiBjcmVhdGVBcnJheU9mVHlwZUNoZWNrZXIsXG4gICAgZWxlbWVudDogY3JlYXRlRWxlbWVudFR5cGVDaGVja2VyKCksXG4gICAgZWxlbWVudFR5cGU6IGNyZWF0ZUVsZW1lbnRUeXBlVHlwZUNoZWNrZXIoKSxcbiAgICBpbnN0YW5jZU9mOiBjcmVhdGVJbnN0YW5jZVR5cGVDaGVja2VyLFxuICAgIG5vZGU6IGNyZWF0ZU5vZGVDaGVja2VyKCksXG4gICAgb2JqZWN0T2Y6IGNyZWF0ZU9iamVjdE9mVHlwZUNoZWNrZXIsXG4gICAgb25lT2Y6IGNyZWF0ZUVudW1UeXBlQ2hlY2tlcixcbiAgICBvbmVPZlR5cGU6IGNyZWF0ZVVuaW9uVHlwZUNoZWNrZXIsXG4gICAgc2hhcGU6IGNyZWF0ZVNoYXBlVHlwZUNoZWNrZXIsXG4gICAgZXhhY3Q6IGNyZWF0ZVN0cmljdFNoYXBlVHlwZUNoZWNrZXIsXG4gIH07XG5cbiAgLyoqXG4gICAqIGlubGluZWQgT2JqZWN0LmlzIHBvbHlmaWxsIHRvIGF2b2lkIHJlcXVpcmluZyBjb25zdW1lcnMgc2hpcCB0aGVpciBvd25cbiAgICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2lzXG4gICAqL1xuICAvKmVzbGludC1kaXNhYmxlIG5vLXNlbGYtY29tcGFyZSovXG4gIGZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgICAvLyBTYW1lVmFsdWUgYWxnb3JpdGhtXG4gICAgaWYgKHggPT09IHkpIHtcbiAgICAgIC8vIFN0ZXBzIDEtNSwgNy0xMFxuICAgICAgLy8gU3RlcHMgNi5iLTYuZTogKzAgIT0gLTBcbiAgICAgIHJldHVybiB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU3RlcCA2LmE6IE5hTiA9PSBOYU5cbiAgICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gICAgfVxuICB9XG4gIC8qZXNsaW50LWVuYWJsZSBuby1zZWxmLWNvbXBhcmUqL1xuXG4gIC8qKlxuICAgKiBXZSB1c2UgYW4gRXJyb3ItbGlrZSBvYmplY3QgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgYXMgcGVvcGxlIG1heSBjYWxsXG4gICAqIFByb3BUeXBlcyBkaXJlY3RseSBhbmQgaW5zcGVjdCB0aGVpciBvdXRwdXQuIEhvd2V2ZXIsIHdlIGRvbid0IHVzZSByZWFsXG4gICAqIEVycm9ycyBhbnltb3JlLiBXZSBkb24ndCBpbnNwZWN0IHRoZWlyIHN0YWNrIGFueXdheSwgYW5kIGNyZWF0aW5nIHRoZW1cbiAgICogaXMgcHJvaGliaXRpdmVseSBleHBlbnNpdmUgaWYgdGhleSBhcmUgY3JlYXRlZCB0b28gb2Z0ZW4sIHN1Y2ggYXMgd2hhdFxuICAgKiBoYXBwZW5zIGluIG9uZU9mVHlwZSgpIGZvciBhbnkgdHlwZSBiZWZvcmUgdGhlIG9uZSB0aGF0IG1hdGNoZWQuXG4gICAqL1xuICBmdW5jdGlvbiBQcm9wVHlwZUVycm9yKG1lc3NhZ2UpIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgIHRoaXMuc3RhY2sgPSAnJztcbiAgfVxuICAvLyBNYWtlIGBpbnN0YW5jZW9mIEVycm9yYCBzdGlsbCB3b3JrIGZvciByZXR1cm5lZCBlcnJvcnMuXG4gIFByb3BUeXBlRXJyb3IucHJvdG90eXBlID0gRXJyb3IucHJvdG90eXBlO1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBtYW51YWxQcm9wVHlwZUNhbGxDYWNoZSA9IHt9O1xuICAgICAgdmFyIG1hbnVhbFByb3BUeXBlV2FybmluZ0NvdW50ID0gMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gY2hlY2tUeXBlKGlzUmVxdWlyZWQsIHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgICBjb21wb25lbnROYW1lID0gY29tcG9uZW50TmFtZSB8fCBBTk9OWU1PVVM7XG4gICAgICBwcm9wRnVsbE5hbWUgPSBwcm9wRnVsbE5hbWUgfHwgcHJvcE5hbWU7XG5cbiAgICAgIGlmIChzZWNyZXQgIT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAgIGlmICh0aHJvd09uRGlyZWN0QWNjZXNzKSB7XG4gICAgICAgICAgLy8gTmV3IGJlaGF2aW9yIG9ubHkgZm9yIHVzZXJzIG9mIGBwcm9wLXR5cGVzYCBwYWNrYWdlXG4gICAgICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcihcbiAgICAgICAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICAgICAgICdVc2UgYFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpYCB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgICAgICAgKTtcbiAgICAgICAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAvLyBPbGQgYmVoYXZpb3IgZm9yIHBlb3BsZSB1c2luZyBSZWFjdC5Qcm9wVHlwZXNcbiAgICAgICAgICB2YXIgY2FjaGVLZXkgPSBjb21wb25lbnROYW1lICsgJzonICsgcHJvcE5hbWU7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgIW1hbnVhbFByb3BUeXBlQ2FsbENhY2hlW2NhY2hlS2V5XSAmJlxuICAgICAgICAgICAgLy8gQXZvaWQgc3BhbW1pbmcgdGhlIGNvbnNvbGUgYmVjYXVzZSB0aGV5IGFyZSBvZnRlbiBub3QgYWN0aW9uYWJsZSBleGNlcHQgZm9yIGxpYiBhdXRob3JzXG4gICAgICAgICAgICBtYW51YWxQcm9wVHlwZVdhcm5pbmdDb3VudCA8IDNcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHByaW50V2FybmluZyhcbiAgICAgICAgICAgICAgJ1lvdSBhcmUgbWFudWFsbHkgY2FsbGluZyBhIFJlYWN0LlByb3BUeXBlcyB2YWxpZGF0aW9uICcgK1xuICAgICAgICAgICAgICAnZnVuY3Rpb24gZm9yIHRoZSBgJyArIHByb3BGdWxsTmFtZSArICdgIHByb3Agb24gYCcgKyBjb21wb25lbnROYW1lICArICdgLiBUaGlzIGlzIGRlcHJlY2F0ZWQgJyArXG4gICAgICAgICAgICAgICdhbmQgd2lsbCB0aHJvdyBpbiB0aGUgc3RhbmRhbG9uZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAgICAgICAgICdZb3UgbWF5IGJlIHNlZWluZyB0aGlzIHdhcm5pbmcgZHVlIHRvIGEgdGhpcmQtcGFydHkgUHJvcFR5cGVzICcgK1xuICAgICAgICAgICAgICAnbGlicmFyeS4gU2VlIGh0dHBzOi8vZmIubWUvcmVhY3Qtd2FybmluZy1kb250LWNhbGwtcHJvcHR5cGVzICcgKyAnZm9yIGRldGFpbHMuJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIG1hbnVhbFByb3BUeXBlQ2FsbENhY2hlW2NhY2hlS2V5XSA9IHRydWU7XG4gICAgICAgICAgICBtYW51YWxQcm9wVHlwZVdhcm5pbmdDb3VudCsrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHByb3BzW3Byb3BOYW1lXSA9PSBudWxsKSB7XG4gICAgICAgIGlmIChpc1JlcXVpcmVkKSB7XG4gICAgICAgICAgaWYgKHByb3BzW3Byb3BOYW1lXSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdUaGUgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIGlzIG1hcmtlZCBhcyByZXF1aXJlZCAnICsgKCdpbiBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgYnV0IGl0cyB2YWx1ZSBpcyBgbnVsbGAuJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ1RoZSAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2AgaXMgbWFya2VkIGFzIHJlcXVpcmVkIGluICcgKyAoJ2AnICsgY29tcG9uZW50TmFtZSArICdgLCBidXQgaXRzIHZhbHVlIGlzIGB1bmRlZmluZWRgLicpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBjaGFpbmVkQ2hlY2tUeXBlID0gY2hlY2tUeXBlLmJpbmQobnVsbCwgZmFsc2UpO1xuICAgIGNoYWluZWRDaGVja1R5cGUuaXNSZXF1aXJlZCA9IGNoZWNrVHlwZS5iaW5kKG51bGwsIHRydWUpO1xuXG4gICAgcmV0dXJuIGNoYWluZWRDaGVja1R5cGU7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcihleHBlY3RlZFR5cGUpIHtcbiAgICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgICBpZiAocHJvcFR5cGUgIT09IGV4cGVjdGVkVHlwZSkge1xuICAgICAgICAvLyBgcHJvcFZhbHVlYCBiZWluZyBpbnN0YW5jZSBvZiwgc2F5LCBkYXRlL3JlZ2V4cCwgcGFzcyB0aGUgJ29iamVjdCdcbiAgICAgICAgLy8gY2hlY2ssIGJ1dCB3ZSBjYW4gb2ZmZXIgYSBtb3JlIHByZWNpc2UgZXJyb3IgbWVzc2FnZSBoZXJlIHJhdGhlciB0aGFuXG4gICAgICAgIC8vICdvZiB0eXBlIGBvYmplY3RgJy5cbiAgICAgICAgdmFyIHByZWNpc2VUeXBlID0gZ2V0UHJlY2lzZVR5cGUocHJvcFZhbHVlKTtcblxuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBwcmVjaXNlVHlwZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCAnKSArICgnYCcgKyBleHBlY3RlZFR5cGUgKyAnYC4nKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUFueVR5cGVDaGVja2VyKCkge1xuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcihlbXB0eUZ1bmN0aW9uVGhhdFJldHVybnNOdWxsKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUFycmF5T2ZUeXBlQ2hlY2tlcih0eXBlQ2hlY2tlcikge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgaWYgKHR5cGVvZiB0eXBlQ2hlY2tlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ1Byb3BlcnR5IGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgY29tcG9uZW50IGAnICsgY29tcG9uZW50TmFtZSArICdgIGhhcyBpbnZhbGlkIFByb3BUeXBlIG5vdGF0aW9uIGluc2lkZSBhcnJheU9mLicpO1xuICAgICAgfVxuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShwcm9wVmFsdWUpKSB7XG4gICAgICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSAnICsgKCdgJyArIHByb3BUeXBlICsgJ2Agc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGFuIGFycmF5LicpKTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcFZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBlcnJvciA9IHR5cGVDaGVja2VyKHByb3BWYWx1ZSwgaSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSArICdbJyArIGkgKyAnXScsIFJlYWN0UHJvcFR5cGVzU2VjcmV0KTtcbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlRWxlbWVudFR5cGVDaGVja2VyKCkge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgIGlmICghaXNWYWxpZEVsZW1lbnQocHJvcFZhbHVlKSkge1xuICAgICAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBwcm9wVHlwZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBhIHNpbmdsZSBSZWFjdEVsZW1lbnQuJykpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVFbGVtZW50VHlwZVR5cGVDaGVja2VyKCkge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgIGlmICghUmVhY3RJcy5pc1ZhbGlkRWxlbWVudFR5cGUocHJvcFZhbHVlKSkge1xuICAgICAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBwcm9wVHlwZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBhIHNpbmdsZSBSZWFjdEVsZW1lbnQgdHlwZS4nKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlVHlwZUNoZWNrZXIoZXhwZWN0ZWRDbGFzcykge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgaWYgKCEocHJvcHNbcHJvcE5hbWVdIGluc3RhbmNlb2YgZXhwZWN0ZWRDbGFzcykpIHtcbiAgICAgICAgdmFyIGV4cGVjdGVkQ2xhc3NOYW1lID0gZXhwZWN0ZWRDbGFzcy5uYW1lIHx8IEFOT05ZTU9VUztcbiAgICAgICAgdmFyIGFjdHVhbENsYXNzTmFtZSA9IGdldENsYXNzTmFtZShwcm9wc1twcm9wTmFtZV0pO1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBhY3R1YWxDbGFzc05hbWUgKyAnYCBzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgJykgKyAoJ2luc3RhbmNlIG9mIGAnICsgZXhwZWN0ZWRDbGFzc05hbWUgKyAnYC4nKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUVudW1UeXBlQ2hlY2tlcihleHBlY3RlZFZhbHVlcykge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShleHBlY3RlZFZhbHVlcykpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgIHByaW50V2FybmluZyhcbiAgICAgICAgICAgICdJbnZhbGlkIGFyZ3VtZW50cyBzdXBwbGllZCB0byBvbmVPZiwgZXhwZWN0ZWQgYW4gYXJyYXksIGdvdCAnICsgYXJndW1lbnRzLmxlbmd0aCArICcgYXJndW1lbnRzLiAnICtcbiAgICAgICAgICAgICdBIGNvbW1vbiBtaXN0YWtlIGlzIHRvIHdyaXRlIG9uZU9mKHgsIHksIHopIGluc3RlYWQgb2Ygb25lT2YoW3gsIHksIHpdKS4nXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcmludFdhcm5pbmcoJ0ludmFsaWQgYXJndW1lbnQgc3VwcGxpZWQgdG8gb25lT2YsIGV4cGVjdGVkIGFuIGFycmF5LicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZW1wdHlGdW5jdGlvblRoYXRSZXR1cm5zTnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV4cGVjdGVkVmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChpcyhwcm9wVmFsdWUsIGV4cGVjdGVkVmFsdWVzW2ldKSkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciB2YWx1ZXNTdHJpbmcgPSBKU09OLnN0cmluZ2lmeShleHBlY3RlZFZhbHVlcywgZnVuY3Rpb24gcmVwbGFjZXIoa2V5LCB2YWx1ZSkge1xuICAgICAgICB2YXIgdHlwZSA9IGdldFByZWNpc2VUeXBlKHZhbHVlKTtcbiAgICAgICAgaWYgKHR5cGUgPT09ICdzeW1ib2wnKSB7XG4gICAgICAgICAgcmV0dXJuIFN0cmluZyh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHZhbHVlIGAnICsgU3RyaW5nKHByb3BWYWx1ZSkgKyAnYCAnICsgKCdzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgb25lIG9mICcgKyB2YWx1ZXNTdHJpbmcgKyAnLicpKTtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZU9iamVjdE9mVHlwZUNoZWNrZXIodHlwZUNoZWNrZXIpIHtcbiAgICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdHlwZUNoZWNrZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdQcm9wZXJ0eSBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIGNvbXBvbmVudCBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCBoYXMgaW52YWxpZCBQcm9wVHlwZSBub3RhdGlvbiBpbnNpZGUgb2JqZWN0T2YuJyk7XG4gICAgICB9XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICAgIGlmIChwcm9wVHlwZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB0eXBlICcgKyAoJ2AnICsgcHJvcFR5cGUgKyAnYCBzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYW4gb2JqZWN0LicpKTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGtleSBpbiBwcm9wVmFsdWUpIHtcbiAgICAgICAgaWYgKGhhcyhwcm9wVmFsdWUsIGtleSkpIHtcbiAgICAgICAgICB2YXIgZXJyb3IgPSB0eXBlQ2hlY2tlcihwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSArICcuJyArIGtleSwgUmVhY3RQcm9wVHlwZXNTZWNyZXQpO1xuICAgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVVuaW9uVHlwZUNoZWNrZXIoYXJyYXlPZlR5cGVDaGVja2Vycykge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShhcnJheU9mVHlwZUNoZWNrZXJzKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHByaW50V2FybmluZygnSW52YWxpZCBhcmd1bWVudCBzdXBwbGllZCB0byBvbmVPZlR5cGUsIGV4cGVjdGVkIGFuIGluc3RhbmNlIG9mIGFycmF5LicpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIGVtcHR5RnVuY3Rpb25UaGF0UmV0dXJuc051bGw7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheU9mVHlwZUNoZWNrZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgY2hlY2tlciA9IGFycmF5T2ZUeXBlQ2hlY2tlcnNbaV07XG4gICAgICBpZiAodHlwZW9mIGNoZWNrZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcHJpbnRXYXJuaW5nKFxuICAgICAgICAgICdJbnZhbGlkIGFyZ3VtZW50IHN1cHBsaWVkIHRvIG9uZU9mVHlwZS4gRXhwZWN0ZWQgYW4gYXJyYXkgb2YgY2hlY2sgZnVuY3Rpb25zLCBidXQgJyArXG4gICAgICAgICAgJ3JlY2VpdmVkICcgKyBnZXRQb3N0Zml4Rm9yVHlwZVdhcm5pbmcoY2hlY2tlcikgKyAnIGF0IGluZGV4ICcgKyBpICsgJy4nXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiBlbXB0eUZ1bmN0aW9uVGhhdFJldHVybnNOdWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheU9mVHlwZUNoZWNrZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjaGVja2VyID0gYXJyYXlPZlR5cGVDaGVja2Vyc1tpXTtcbiAgICAgICAgaWYgKGNoZWNrZXIocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBSZWFjdFByb3BUeXBlc1NlY3JldCkgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agc3VwcGxpZWQgdG8gJyArICgnYCcgKyBjb21wb25lbnROYW1lICsgJ2AuJykpO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlTm9kZUNoZWNrZXIoKSB7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICBpZiAoIWlzTm9kZShwcm9wc1twcm9wTmFtZV0pKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agc3VwcGxpZWQgdG8gJyArICgnYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGEgUmVhY3ROb2RlLicpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlU2hhcGVUeXBlQ2hlY2tlcihzaGFwZVR5cGVzKSB7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICAgIGlmIChwcm9wVHlwZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB0eXBlIGAnICsgcHJvcFR5cGUgKyAnYCAnICsgKCdzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYG9iamVjdGAuJykpO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIga2V5IGluIHNoYXBlVHlwZXMpIHtcbiAgICAgICAgdmFyIGNoZWNrZXIgPSBzaGFwZVR5cGVzW2tleV07XG4gICAgICAgIGlmICghY2hlY2tlcikge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBlcnJvciA9IGNoZWNrZXIocHJvcFZhbHVlLCBrZXksIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUgKyAnLicgKyBrZXksIFJlYWN0UHJvcFR5cGVzU2VjcmV0KTtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVN0cmljdFNoYXBlVHlwZUNoZWNrZXIoc2hhcGVUeXBlcykge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgICBpZiAocHJvcFR5cGUgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSBgJyArIHByb3BUeXBlICsgJ2AgJyArICgnc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGBvYmplY3RgLicpKTtcbiAgICAgIH1cbiAgICAgIC8vIFdlIG5lZWQgdG8gY2hlY2sgYWxsIGtleXMgaW4gY2FzZSBzb21lIGFyZSByZXF1aXJlZCBidXQgbWlzc2luZyBmcm9tXG4gICAgICAvLyBwcm9wcy5cbiAgICAgIHZhciBhbGxLZXlzID0gYXNzaWduKHt9LCBwcm9wc1twcm9wTmFtZV0sIHNoYXBlVHlwZXMpO1xuICAgICAgZm9yICh2YXIga2V5IGluIGFsbEtleXMpIHtcbiAgICAgICAgdmFyIGNoZWNrZXIgPSBzaGFwZVR5cGVzW2tleV07XG4gICAgICAgIGlmICghY2hlY2tlcikge1xuICAgICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcihcbiAgICAgICAgICAgICdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBrZXkgYCcgKyBrZXkgKyAnYCBzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYC4nICtcbiAgICAgICAgICAgICdcXG5CYWQgb2JqZWN0OiAnICsgSlNPTi5zdHJpbmdpZnkocHJvcHNbcHJvcE5hbWVdLCBudWxsLCAnICAnKSArXG4gICAgICAgICAgICAnXFxuVmFsaWQga2V5czogJyArICBKU09OLnN0cmluZ2lmeShPYmplY3Qua2V5cyhzaGFwZVR5cGVzKSwgbnVsbCwgJyAgJylcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHZhciBlcnJvciA9IGNoZWNrZXIocHJvcFZhbHVlLCBrZXksIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUgKyAnLicgKyBrZXksIFJlYWN0UHJvcFR5cGVzU2VjcmV0KTtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNOb2RlKHByb3BWYWx1ZSkge1xuICAgIHN3aXRjaCAodHlwZW9mIHByb3BWYWx1ZSkge1xuICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICBjYXNlICd1bmRlZmluZWQnOlxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgICByZXR1cm4gIXByb3BWYWx1ZTtcbiAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHByb3BWYWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gcHJvcFZhbHVlLmV2ZXJ5KGlzTm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb3BWYWx1ZSA9PT0gbnVsbCB8fCBpc1ZhbGlkRWxlbWVudChwcm9wVmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaXRlcmF0b3JGbiA9IGdldEl0ZXJhdG9yRm4ocHJvcFZhbHVlKTtcbiAgICAgICAgaWYgKGl0ZXJhdG9yRm4pIHtcbiAgICAgICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYXRvckZuLmNhbGwocHJvcFZhbHVlKTtcbiAgICAgICAgICB2YXIgc3RlcDtcbiAgICAgICAgICBpZiAoaXRlcmF0b3JGbiAhPT0gcHJvcFZhbHVlLmVudHJpZXMpIHtcbiAgICAgICAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgICAgICAgaWYgKCFpc05vZGUoc3RlcC52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gSXRlcmF0b3Igd2lsbCBwcm92aWRlIGVudHJ5IFtrLHZdIHR1cGxlcyByYXRoZXIgdGhhbiB2YWx1ZXMuXG4gICAgICAgICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICAgICAgICAgIHZhciBlbnRyeSA9IHN0ZXAudmFsdWU7XG4gICAgICAgICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgICAgICAgIGlmICghaXNOb2RlKGVudHJ5WzFdKSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc1N5bWJvbChwcm9wVHlwZSwgcHJvcFZhbHVlKSB7XG4gICAgLy8gTmF0aXZlIFN5bWJvbC5cbiAgICBpZiAocHJvcFR5cGUgPT09ICdzeW1ib2wnKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBmYWxzeSB2YWx1ZSBjYW4ndCBiZSBhIFN5bWJvbFxuICAgIGlmICghcHJvcFZhbHVlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gMTkuNC4zLjUgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXSA9PT0gJ1N5bWJvbCdcbiAgICBpZiAocHJvcFZhbHVlWydAQHRvU3RyaW5nVGFnJ10gPT09ICdTeW1ib2wnKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBGYWxsYmFjayBmb3Igbm9uLXNwZWMgY29tcGxpYW50IFN5bWJvbHMgd2hpY2ggYXJlIHBvbHlmaWxsZWQuXG4gICAgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgcHJvcFZhbHVlIGluc3RhbmNlb2YgU3ltYm9sKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBFcXVpdmFsZW50IG9mIGB0eXBlb2ZgIGJ1dCB3aXRoIHNwZWNpYWwgaGFuZGxpbmcgZm9yIGFycmF5IGFuZCByZWdleHAuXG4gIGZ1bmN0aW9uIGdldFByb3BUeXBlKHByb3BWYWx1ZSkge1xuICAgIHZhciBwcm9wVHlwZSA9IHR5cGVvZiBwcm9wVmFsdWU7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocHJvcFZhbHVlKSkge1xuICAgICAgcmV0dXJuICdhcnJheSc7XG4gICAgfVxuICAgIGlmIChwcm9wVmFsdWUgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgIC8vIE9sZCB3ZWJraXRzIChhdCBsZWFzdCB1bnRpbCBBbmRyb2lkIDQuMCkgcmV0dXJuICdmdW5jdGlvbicgcmF0aGVyIHRoYW5cbiAgICAgIC8vICdvYmplY3QnIGZvciB0eXBlb2YgYSBSZWdFeHAuIFdlJ2xsIG5vcm1hbGl6ZSB0aGlzIGhlcmUgc28gdGhhdCAvYmxhL1xuICAgICAgLy8gcGFzc2VzIFByb3BUeXBlcy5vYmplY3QuXG4gICAgICByZXR1cm4gJ29iamVjdCc7XG4gICAgfVxuICAgIGlmIChpc1N5bWJvbChwcm9wVHlwZSwgcHJvcFZhbHVlKSkge1xuICAgICAgcmV0dXJuICdzeW1ib2wnO1xuICAgIH1cbiAgICByZXR1cm4gcHJvcFR5cGU7XG4gIH1cblxuICAvLyBUaGlzIGhhbmRsZXMgbW9yZSB0eXBlcyB0aGFuIGBnZXRQcm9wVHlwZWAuIE9ubHkgdXNlZCBmb3IgZXJyb3IgbWVzc2FnZXMuXG4gIC8vIFNlZSBgY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXJgLlxuICBmdW5jdGlvbiBnZXRQcmVjaXNlVHlwZShwcm9wVmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHByb3BWYWx1ZSA9PT0gJ3VuZGVmaW5lZCcgfHwgcHJvcFZhbHVlID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gJycgKyBwcm9wVmFsdWU7XG4gICAgfVxuICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgaWYgKHByb3BUeXBlID09PSAnb2JqZWN0Jykge1xuICAgICAgaWYgKHByb3BWYWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgcmV0dXJuICdkYXRlJztcbiAgICAgIH0gZWxzZSBpZiAocHJvcFZhbHVlIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICAgIHJldHVybiAncmVnZXhwJztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHByb3BUeXBlO1xuICB9XG5cbiAgLy8gUmV0dXJucyBhIHN0cmluZyB0aGF0IGlzIHBvc3RmaXhlZCB0byBhIHdhcm5pbmcgYWJvdXQgYW4gaW52YWxpZCB0eXBlLlxuICAvLyBGb3IgZXhhbXBsZSwgXCJ1bmRlZmluZWRcIiBvciBcIm9mIHR5cGUgYXJyYXlcIlxuICBmdW5jdGlvbiBnZXRQb3N0Zml4Rm9yVHlwZVdhcm5pbmcodmFsdWUpIHtcbiAgICB2YXIgdHlwZSA9IGdldFByZWNpc2VUeXBlKHZhbHVlKTtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgJ2FycmF5JzpcbiAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgIHJldHVybiAnYW4gJyArIHR5cGU7XG4gICAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIGNhc2UgJ2RhdGUnOlxuICAgICAgY2FzZSAncmVnZXhwJzpcbiAgICAgICAgcmV0dXJuICdhICcgKyB0eXBlO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHR5cGU7XG4gICAgfVxuICB9XG5cbiAgLy8gUmV0dXJucyBjbGFzcyBuYW1lIG9mIHRoZSBvYmplY3QsIGlmIGFueS5cbiAgZnVuY3Rpb24gZ2V0Q2xhc3NOYW1lKHByb3BWYWx1ZSkge1xuICAgIGlmICghcHJvcFZhbHVlLmNvbnN0cnVjdG9yIHx8ICFwcm9wVmFsdWUuY29uc3RydWN0b3IubmFtZSkge1xuICAgICAgcmV0dXJuIEFOT05ZTU9VUztcbiAgICB9XG4gICAgcmV0dXJuIHByb3BWYWx1ZS5jb25zdHJ1Y3Rvci5uYW1lO1xuICB9XG5cbiAgUmVhY3RQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMgPSBjaGVja1Byb3BUeXBlcztcbiAgUmVhY3RQcm9wVHlwZXMucmVzZXRXYXJuaW5nQ2FjaGUgPSBjaGVja1Byb3BUeXBlcy5yZXNldFdhcm5pbmdDYWNoZTtcbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQoKSB7fVxuZW1wdHlGdW5jdGlvbldpdGhSZXNldC5yZXNldFdhcm5pbmdDYWNoZSA9IGVtcHR5RnVuY3Rpb247XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBlbGVtZW50VHlwZTogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltLFxuXG4gICAgY2hlY2tQcm9wVHlwZXM6IGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQsXG4gICAgcmVzZXRXYXJuaW5nQ2FjaGU6IGVtcHR5RnVuY3Rpb25cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCJpbXBvcnQgeyBDaGlsZHJlbiwgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuY29uc3Qgc3BlY2lhbFJlYWN0S2V5cyA9IHsgY2hpbGRyZW46IHRydWUsIGtleTogdHJ1ZSwgcmVmOiB0cnVlIH07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb3ZpZGVyIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIGNvbnRleHRUeXBlcyA9IHtcbiAgXHRzdG9yZTogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIHN0YXRpYyBjaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgXHRzdG9yZTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXG4gIH07XG5cbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgXHRjaGlsZHJlbjogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgXHRyZXR1cm4gQ2hpbGRyZW4ub25seSh0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgfVxuXG4gIGdldENoaWxkQ29udGV4dCgpIHtcbiAgXHRjb25zdCBzdG9yZXMgPSB7fTtcbiAgXHRmb3IgKGxldCBrZXkgaW4gdGhpcy5wcm9wcykge1xuICBcdFx0aWYgKCFzcGVjaWFsUmVhY3RLZXlzW2tleV0pIHtcbiAgXHRcdFx0c3RvcmVzW2tleV0gPSB0aGlzLnByb3BzW2tleV07XG4gIFx0XHRcdC8vXHRjb25zb2xlLmxvZygnc3RvcmVzOicsIHN0b3Jlcyk7XG4gIFx0XHR9XG4gIFx0fVxuICBcdHJldHVybiB7IHN0b3JlOiBzdG9yZXMgfTtcbiAgfVxufVxuIiwiLy8gMTkuMS4yLjE3IE9iamVjdC5zZWFsKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ3NlYWwnLCBmdW5jdGlvbiAoJHNlYWwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNlYWwoaXQpIHtcbiAgICByZXR1cm4gJHNlYWwgJiYgaXNPYmplY3QoaXQpID8gJHNlYWwobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gIGNvbnRleHRUeXBlOiB0cnVlLFxuICBjb250ZXh0VHlwZXM6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gIG1peGluczogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gIG5hbWU6IHRydWUsXG4gIGxlbmd0aDogdHJ1ZSxcbiAgcHJvdG90eXBlOiB0cnVlLFxuICBjYWxsZXI6IHRydWUsXG4gIGNhbGxlZTogdHJ1ZSxcbiAgYXJndW1lbnRzOiB0cnVlLFxuICBhcml0eTogdHJ1ZVxufTtcbnZhciBGT1JXQVJEX1JFRl9TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICByZW5kZXI6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZVxufTtcbnZhciBNRU1PX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIGNvbXBhcmU6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBUWVBFX1NUQVRJQ1MgPSB7fTtcblRZUEVfU1RBVElDU1tyZWFjdElzLkZvcndhcmRSZWZdID0gRk9SV0FSRF9SRUZfU1RBVElDUztcblRZUEVfU1RBVElDU1tyZWFjdElzLk1lbW9dID0gTUVNT19TVEFUSUNTO1xuXG5mdW5jdGlvbiBnZXRTdGF0aWNzKGNvbXBvbmVudCkge1xuICAvLyBSZWFjdCB2MTYuMTEgYW5kIGJlbG93XG4gIGlmIChyZWFjdElzLmlzTWVtbyhjb21wb25lbnQpKSB7XG4gICAgcmV0dXJuIE1FTU9fU1RBVElDUztcbiAgfSAvLyBSZWFjdCB2MTYuMTIgYW5kIGFib3ZlXG5cblxuICByZXR1cm4gVFlQRV9TVEFUSUNTW2NvbXBvbmVudFsnJCR0eXBlb2YnXV0gfHwgUkVBQ1RfU1RBVElDUztcbn1cblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgb2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbmZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcbiAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlQ29tcG9uZW50KSk7XG4gICAgfVxuXG4gICAgdmFyIHRhcmdldFN0YXRpY3MgPSBnZXRTdGF0aWNzKHRhcmdldENvbXBvbmVudCk7XG4gICAgdmFyIHNvdXJjZVN0YXRpY3MgPSBnZXRTdGF0aWNzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICBpZiAoIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAhKGJsYWNrbGlzdCAmJiBibGFja2xpc3Rba2V5XSkgJiYgIShzb3VyY2VTdGF0aWNzICYmIHNvdXJjZVN0YXRpY3Nba2V5XSkgJiYgISh0YXJnZXRTdGF0aWNzICYmIHRhcmdldFN0YXRpY3Nba2V5XSkpIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhvaXN0Tm9uUmVhY3RTdGF0aWNzO1xuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBjcmVhdGVFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGhvaXN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuZXhwb3J0IGZ1bmN0aW9uIGlzU3RhdGVsZXNzKGNvbXBvbmVudCkge1xuICByZXR1cm4gIShjb21wb25lbnQucHJvdG90eXBlICYmIGNvbXBvbmVudC5wcm90b3R5cGUucmVuZGVyKTtcbn1cbmNvbnN0IGluamVjdG9yQ29udGV4dFR5cGVzID0ge1xuICBzdG9yZTogUHJvcFR5cGVzLm9iamVjdE9yT2JzZXJ2YWJsZU9iamVjdFxufTtcbk9iamVjdC5zZWFsKGluamVjdG9yQ29udGV4dFR5cGVzKTtcblxuY29uc3QgcHJveGllZEluamVjdG9yUHJvcHMgPSB7XG4gIGNvbnRleHRUeXBlczoge1xuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gaW5qZWN0b3JDb250ZXh0VHlwZXM7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGNvbnNvbGUud2FybignY29udGV4dOS4jeWPr+S7peS/ruaUuScpO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IGZhbHNlXG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0b3JlSW5qZWN0b3IoZ3JhYlN0b3Jlc0ZuLCBjb21wb25lbnQsIGluamVjdE5hbWVzKSB7XG4gIGxldCBkaXNwbGF5TmFtZSA9XG4gICAgJ2luamVjdC0nICtcbiAgICAoY29tcG9uZW50LmRpc3BsYXlOYW1lIHx8XG4gICAgICBjb21wb25lbnQubmFtZSB8fFxuICAgICAgKGNvbXBvbmVudC5jb25zdHJ1Y3RvciAmJiBjb21wb25lbnQuY29uc3RydWN0b3IubmFtZSkgfHxcbiAgICAgICdVbmtub3duJyk7XG4gIGlmIChpbmplY3ROYW1lcykgZGlzcGxheU5hbWUgKz0gJy13aXRoLScgKyBpbmplY3ROYW1lcztcbiAgY2xhc3MgSW5qZWN0b3IgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIHN0YXRpYyBkaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuXG4gICAgc3RvcmVSZWYgPSBpbnN0YW5jZSA9PiB7XG4gICAgICB0aGlzLndyYXBwZWRJbnN0YW5jZSA9IGluc3RhbmNlO1xuICAgIH07XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICBsZXQgbmV3UHJvcHMgPSB7fTtcbiAgICAgIGZvciAobGV0IGtleSBpbiB0aGlzLnByb3BzKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICBuZXdQcm9wc1trZXldID0gdGhpcy5wcm9wc1trZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgYWRkaXRpb25hbFByb3BzID1cbiAgICAgICAgZ3JhYlN0b3Jlc0ZuKHRoaXMuY29udGV4dC5zdG9yZSB8fCB7fSwgbmV3UHJvcHMsIHRoaXMuY29udGV4dCkgfHwge307XG4gICAgICBmb3IgKGxldCBrZXkgaW4gYWRkaXRpb25hbFByb3BzKSB7XG4gICAgICAgIG5ld1Byb3BzW2tleV0gPSBhZGRpdGlvbmFsUHJvcHNba2V5XTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc1N0YXRlbGVzcyhjb21wb25lbnQpKSB7XG4gICAgICAgIG5ld1Byb3BzLnJlZiA9IHRoaXMuc3RvcmVSZWY7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgbmV3UHJvcHMpO1xuICAgIH1cbiAgfVxuXG4gIGhvaXN0U3RhdGljcyhJbmplY3RvciwgY29tcG9uZW50KTtcblxuICBJbmplY3Rvci53cmFwcGVkQ29tcG9uZW50ID0gY29tcG9uZW50O1xuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhJbmplY3RvciwgcHJveGllZEluamVjdG9yUHJvcHMpO1xuXG4gIHJldHVybiBJbmplY3Rvcjtcbn1cblxuLy/kvKDpgJJzdG9yZeWxnuaAp1xuZnVuY3Rpb24gZ3JhYlN0b3Jlc0J5TmFtZShzdG9yZU5hbWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbihiYXNlU3RvcmVzLCBuZXh0UHJvcHMpIHtcbiAgICBzdG9yZU5hbWVzLmZvckVhY2goZnVuY3Rpb24oc3RvcmVOYW1lKSB7XG4gICAgICBpZiAoc3RvcmVOYW1lIGluIG5leHRQcm9wcykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoIShzdG9yZU5hbWUgaW4gYmFzZVN0b3JlcykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGBpbmplY3Q6JHtzdG9yZU5hbWV95LiN5ZyoUHJvdmlkZXLnmoRwcm9wc+S4rSzor7fmjaLkuKrlgLzph43mlrBpbmplY3RgXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBuZXh0UHJvcHNbc3RvcmVOYW1lXSA9IGJhc2VTdG9yZXNbc3RvcmVOYW1lXTtcbiAgICB9KTtcbiAgICByZXR1cm4gbmV4dFByb3BzO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpbmplY3QoKSB7XG4gIGxldCBncmFiU3RvcmVzRm47XG4gIGNvbnN0IHN0b3JlTmFtZXMgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHN0b3JlTmFtZXNbaV0gPSBhcmd1bWVudHNbaV07XG4gIGdyYWJTdG9yZXNGbiA9IGdyYWJTdG9yZXNCeU5hbWUoc3RvcmVOYW1lcyk7XG4gIHJldHVybiBmdW5jdGlvbihjb21wb25lbnRDbGFzcykge1xuICAgIHJldHVybiBjcmVhdGVTdG9yZUluamVjdG9yKFxuICAgICAgZ3JhYlN0b3Jlc0ZuLFxuICAgICAgY29tcG9uZW50Q2xhc3MsXG4gICAgICBzdG9yZU5hbWVzLmpvaW4oJy0nKVxuICAgICk7XG4gIH07XG59XG4iXSwibmFtZXMiOlsiaXQiLCJpc09iamVjdCIsIlR5cGVFcnJvciIsImV4ZWMiLCJlIiwicmVxdWlyZSQkMCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0IiwiYSIsImdsb2JhbCIsIm1vZHVsZSIsIndpbmRvdyIsIk1hdGgiLCJzZWxmIiwiRnVuY3Rpb24iLCJfX2ciLCJkb2N1bWVudCIsImlzIiwiY3JlYXRlRWxlbWVudCIsInJlcXVpcmUkJDEiLCJyZXF1aXJlJCQyIiwiUyIsImZuIiwidmFsIiwidG9TdHJpbmciLCJjYWxsIiwidmFsdWVPZiIsImRQIiwiTyIsIlAiLCJBdHRyaWJ1dGVzIiwiYW5PYmplY3QiLCJ0b1ByaW1pdGl2ZSIsIklFOF9ET01fREVGSU5FIiwidmFsdWUiLCJmIiwiRlByb3RvIiwicHJvdG90eXBlIiwibmFtZVJFIiwiY29uZmlndXJhYmxlIiwidGhpcyIsIm1hdGNoIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJpIiwibGVuZ3RoIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImtleSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl90eXBlb2YiLCJvYmoiLCJTeW1ib2wiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwiUmVmZXJlbmNlRXJyb3IiLCJhc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJfZ2V0UHJvdG90eXBlT2YiLCJvIiwic2V0UHJvdG90eXBlT2YiLCJnZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIl9zZXRQcm90b3R5cGVPZiIsInAiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJjb3JlIiwidmVyc2lvbiIsIl9fZSIsInN0b3JlIiwidW5kZWZpbmVkIiwicHVzaCIsIm1vZGUiLCJjb3B5cmlnaHQiLCJpZCIsInB4IiwicmFuZG9tIiwiY29uY2F0IiwiVVNFX1NZTUJPTCIsIm5hbWUiLCJ1aWQiLCIkU3ltYm9sIiwiY2hhckF0Iiwid2tzRXh0IiwiaGFzT3duUHJvcGVydHkiLCJiaXRtYXAiLCJvYmplY3QiLCJjcmVhdGVEZXNjIiwiU1JDIiwiVFBMIiwiJHRvU3RyaW5nIiwic3BsaXQiLCJpbnNwZWN0U291cmNlIiwic2FmZSIsImlzRnVuY3Rpb24iLCJoYXMiLCJoaWRlIiwiam9pbiIsIlN0cmluZyIsInRoYXQiLCJhRnVuY3Rpb24iLCJiIiwiYyIsImFwcGx5IiwiYXJndW1lbnRzIiwiJGV4cG9ydCIsInR5cGUiLCJzb3VyY2UiLCJvd24iLCJvdXQiLCJleHAiLCJJU19GT1JDRUQiLCJGIiwiSVNfR0xPQkFMIiwiRyIsIklTX1NUQVRJQyIsIklTX1BST1RPIiwiSVNfQklORCIsIkIiLCJleHBvcnRzIiwiZXhwUHJvdG8iLCJjdHgiLCJyZWRlZmluZSIsIlUiLCJXIiwiUiIsIklTX0lOQ0xVREVTIiwiTUVUQSIsInNldERlc2MiLCJpc0V4dGVuc2libGUiLCJGUkVFWkUiLCJwcmV2ZW50RXh0ZW5zaW9ucyIsInNldE1ldGEiLCJ3IiwibWV0YSIsIktFWSIsIk5FRUQiLCJmYXN0S2V5IiwiZ2V0V2VhayIsIm9uRnJlZXplIiwiZGVmIiwiVEFHIiwidGFnIiwic3RhdCIsInNsaWNlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJjb2YiLCJJT2JqZWN0IiwiZGVmaW5lZCIsImNlaWwiLCJmbG9vciIsImlzTmFOIiwibWluIiwibWF4Iiwic2hhcmVkIiwiYXJyYXlJbmRleE9mIiwiJHRoaXMiLCJlbCIsImZyb21JbmRleCIsInRvSU9iamVjdCIsInRvSW50ZWdlciIsImluZGV4IiwidG9BYnNvbHV0ZUluZGV4IiwiSUVfUFJPVE8iLCJuYW1lcyIsInJlc3VsdCIsImtleXMiLCIka2V5cyIsImVudW1CdWdLZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiQXJyYXkiLCJpc0FycmF5IiwiYXJnIiwiZGVmaW5lUHJvcGVydGllcyIsIlByb3BlcnRpZXMiLCJnZXRLZXlzIiwiZG9jdW1lbnRFbGVtZW50IiwiRW1wdHkiLCJjcmVhdGVEaWN0IiwiaWZyYW1lRG9jdW1lbnQiLCJpZnJhbWUiLCJzdHlsZSIsImRpc3BsYXkiLCJhcHBlbmRDaGlsZCIsInNyYyIsImNvbnRlbnRXaW5kb3ciLCJvcGVuIiwid3JpdGUiLCJsdCIsImNsb3NlIiwiZFBzIiwiaGlkZGVuS2V5cyIsImdldE93blByb3BlcnR5TmFtZXMiLCJnT1BOIiwid2luZG93TmFtZXMiLCJnZXRXaW5kb3dOYW1lcyIsImdPUEQiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJwSUUiLCIkR09QRCIsIiREUCIsImdPUE5FeHQiLCIkSlNPTiIsIkpTT04iLCJfc3RyaW5naWZ5Iiwic3RyaW5naWZ5IiwiSElEREVOIiwid2tzIiwiVE9fUFJJTUlUSVZFIiwiaXNFbnVtIiwiU3ltYm9sUmVnaXN0cnkiLCJBbGxTeW1ib2xzIiwiT1BTeW1ib2xzIiwiT2JqZWN0UHJvdG8iLCJVU0VfTkFUSVZFIiwiJEdPUFMiLCJRT2JqZWN0Iiwic2V0dGVyIiwiZmluZENoaWxkIiwic2V0U3ltYm9sRGVzYyIsIkRFU0NSSVBUT1JTIiwiJGZhaWxzIiwiX2NyZWF0ZSIsIkQiLCJwcm90b0Rlc2MiLCJ3cmFwIiwic3ltIiwiX2siLCJpc1N5bWJvbCIsIiRkZWZpbmVQcm9wZXJ0eSIsIiRkZWZpbmVQcm9wZXJ0aWVzIiwiZ2V0U3ltYm9scyIsImdPUFMiLCJzeW1ib2xzIiwiZW51bUtleXMiLCJsIiwiJHByb3BlcnR5SXNFbnVtZXJhYmxlIiwiRSIsIiRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCIkZ2V0T3duUHJvcGVydHlOYW1lcyIsIiRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJJU19PUCIsIiRzZXQiLCJzZXQiLCJlczZTeW1ib2xzIiwiaiIsIndlbGxLbm93blN5bWJvbHMiLCJrIiwid2tzRGVmaW5lIiwiZm9yIiwia2V5Rm9yIiwidXNlU2V0dGVyIiwidXNlU2ltcGxlIiwiRkFJTFNfT05fUFJJTUlUSVZFUyIsInRvT2JqZWN0IiwicmVwbGFjZXIiLCIkcmVwbGFjZXIiLCJhcmdzIiwicmVxdWlyZSQkNCIsInNldFRvU3RyaW5nVGFnIiwiVU5TQ09QQUJMRVMiLCJBcnJheVByb3RvIiwiZG9uZSIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiTkFNRSIsIm5leHQiLCJJVEVSQVRPUiIsIkJVR0dZIiwicmV0dXJuVGhpcyIsIkJhc2UiLCJERUZBVUxUIiwiSVNfU0VUIiwiRk9SQ0VEIiwiJGl0ZXJDcmVhdGUiLCJtZXRob2RzIiwiZ2V0TWV0aG9kIiwia2luZCIsInByb3RvIiwiREVGX1ZBTFVFUyIsIlZBTFVFU19CVUciLCIkbmF0aXZlIiwiJGRlZmF1bHQiLCIkZW50cmllcyIsIiRhbnlOYXRpdmUiLCJlbnRyaWVzIiwiSXRlcmF0b3JzIiwidmFsdWVzIiwiaXRlcmF0ZWQiLCJfdCIsIl9pIiwic3RlcCIsIkFyZ3VtZW50cyIsImFkZFRvVW5zY29wYWJsZXMiLCJUT19TVFJJTkdfVEFHIiwiQXJyYXlWYWx1ZXMiLCJET01JdGVyYWJsZXMiLCJDU1NSdWxlTGlzdCIsIkNTU1N0eWxlRGVjbGFyYXRpb24iLCJDU1NWYWx1ZUxpc3QiLCJDbGllbnRSZWN0TGlzdCIsIkRPTVJlY3RMaXN0IiwiRE9NU3RyaW5nTGlzdCIsIkRPTVRva2VuTGlzdCIsIkRhdGFUcmFuc2Zlckl0ZW1MaXN0IiwiRmlsZUxpc3QiLCJIVE1MQWxsQ29sbGVjdGlvbiIsIkhUTUxDb2xsZWN0aW9uIiwiSFRNTEZvcm1FbGVtZW50IiwiSFRNTFNlbGVjdEVsZW1lbnQiLCJNZWRpYUxpc3QiLCJNaW1lVHlwZUFycmF5IiwiTmFtZWROb2RlTWFwIiwiTm9kZUxpc3QiLCJQYWludFJlcXVlc3RMaXN0IiwiUGx1Z2luIiwiUGx1Z2luQXJyYXkiLCJTVkdMZW5ndGhMaXN0IiwiU1ZHTnVtYmVyTGlzdCIsIlNWR1BhdGhTZWdMaXN0IiwiU1ZHUG9pbnRMaXN0IiwiU1ZHU3RyaW5nTGlzdCIsIlNWR1RyYW5zZm9ybUxpc3QiLCJTb3VyY2VCdWZmZXJMaXN0IiwiU3R5bGVTaGVldExpc3QiLCJUZXh0VHJhY2tDdWVMaXN0IiwiVGV4dFRyYWNrTGlzdCIsIlRvdWNoTGlzdCIsImNvbGxlY3Rpb25zIiwiZXhwbGljaXQiLCJDb2xsZWN0aW9uIiwiJGl0ZXJhdG9ycyIsIkFSRyIsInRlc3QiLCJUIiwidHJ5R2V0IiwiY2FsbGVlIiwiZmFpbHMiLCJldmVudEluc3RhbmNlIiwicHJlZml4IiwiRXZlbnRzIiwiRUUiLCJjb250ZXh0Iiwib25jZSIsImFkZExpc3RlbmVyIiwiZW1pdHRlciIsImV2ZW50IiwibGlzdGVuZXIiLCJldnQiLCJfZXZlbnRzIiwiX2V2ZW50c0NvdW50IiwiY2xlYXJFdmVudCIsIkV2ZW50RW1pdHRlciIsImV2ZW50TmFtZXMiLCJldmVudHMiLCJsaXN0ZW5lcnMiLCJoYW5kbGVycyIsImVlIiwibGlzdGVuZXJDb3VudCIsImVtaXQiLCJhMSIsImEyIiwiYTMiLCJhNCIsImE1IiwibGVuIiwicmVtb3ZlTGlzdGVuZXIiLCJvbiIsInJlbW92ZUFsbExpc3RlbmVycyIsIm9mZiIsInByZWZpeGVkIiwicGF0Y2giLCJmdW5jTmFtZSIsInJ1bk1peGluRmlyc3QiLCJiYXNlIiwibWl4aW5GdW5jIiwicmVhY3RpdmVNaXhpbiIsImRpc3BhdGNoIiwiYWN0aW9uIiwiY29tcG9uZW50V2lsbE1vdW50Iiwib25FdmVudEFjdGlvbiIsIl90aGlzIiwiY29uc29sZSIsImxvZyIsImNvbXBvbmVudFdpbGxVbm1vdW50Iiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwibmV4dFByb3BzIiwibmV4dFN0YXRlIiwic3RhdGUiLCJwcmV2IiwiaXNPYmplY3RTaGFsbG93TW9kaWZpZWQiLCJvYnNlcnZlciIsImFyZzEiLCJjb21wb25lbnRDbGFzcyIsInJlbmRlciIsImlzUmVhY3RDbGFzcyIsIkNvbXBvbmVudCIsImlzUHJvdG90eXBlT2YiLCJkaXNwbGF5TmFtZSIsImNvbnRleHRUeXBlcyIsInByb3BUeXBlcyIsImRlZmF1bHRQcm9wcyIsIkVycm9yIiwibWl4aW5MaWZlY3ljbGVFdmVudHMiLCJmb3JFYWNoIiwiZCIsImciLCJoIiwibSIsIm4iLCJxIiwiciIsInQiLCJ2IiwieCIsInkiLCJ6IiwidSIsIiQkdHlwZW9mIiwiQSIsInByb3BJc0VudW1lcmFibGUiLCJhc3NpZ24iLCJ0ZXN0MSIsInRlc3QyIiwiZnJvbUNoYXJDb2RlIiwibWFwIiwidGVzdDMiLCJsZXR0ZXIiLCJlcnIiLCJzaG91bGRVc2VOYXRpdmUiLCJiaW5kIiwiZW1wdHlGdW5jdGlvbiIsImVtcHR5RnVuY3Rpb25XaXRoUmVzZXQiLCJyZXNldFdhcm5pbmdDYWNoZSIsInNoaW0iLCJwcm9wTmFtZSIsImNvbXBvbmVudE5hbWUiLCJsb2NhdGlvbiIsInByb3BGdWxsTmFtZSIsInNlY3JldCIsImdldFNoaW0iLCJpc1JlcXVpcmVkIiwiUmVhY3RQcm9wVHlwZXMiLCJhcnJheSIsImJvb2wiLCJmdW5jIiwibnVtYmVyIiwic3RyaW5nIiwic3ltYm9sIiwiYW55IiwiYXJyYXlPZiIsImVsZW1lbnQiLCJlbGVtZW50VHlwZSIsImluc3RhbmNlT2YiLCJub2RlIiwib2JqZWN0T2YiLCJvbmVPZiIsIm9uZU9mVHlwZSIsInNoYXBlIiwiZXhhY3QiLCJjaGVja1Byb3BUeXBlcyIsIlByb3BUeXBlcyIsInNwZWNpYWxSZWFjdEtleXMiLCJjaGlsZHJlbiIsInJlZiIsIlByb3ZpZGVyIiwiQ2hpbGRyZW4iLCJvbmx5Iiwic3RvcmVzIiwiY2hpbGRDb250ZXh0VHlwZXMiLCIkc2VhbCIsIlJFQUNUX1NUQVRJQ1MiLCJjb250ZXh0VHlwZSIsImdldERlZmF1bHRQcm9wcyIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIm1peGlucyIsIktOT1dOX1NUQVRJQ1MiLCJjYWxsZXIiLCJhcml0eSIsIk1FTU9fU1RBVElDUyIsImNvbXBhcmUiLCJUWVBFX1NUQVRJQ1MiLCJnZXRTdGF0aWNzIiwiY29tcG9uZW50IiwicmVhY3RJcyIsImlzTWVtbyIsIkZvcndhcmRSZWYiLCJNZW1vIiwib2JqZWN0UHJvdG90eXBlIiwiaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJ0YXJnZXRDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJibGFja2xpc3QiLCJpbmhlcml0ZWRDb21wb25lbnQiLCJ0YXJnZXRTdGF0aWNzIiwic291cmNlU3RhdGljcyIsImluamVjdG9yQ29udGV4dFR5cGVzIiwib2JqZWN0T3JPYnNlcnZhYmxlT2JqZWN0Iiwic2VhbCIsInByb3hpZWRJbmplY3RvclByb3BzIiwiXyIsIndhcm4iLCJjcmVhdGVTdG9yZUluamVjdG9yIiwiZ3JhYlN0b3Jlc0ZuIiwiaW5qZWN0TmFtZXMiLCJJbmplY3RvciIsInN0b3JlUmVmIiwid3JhcHBlZEluc3RhbmNlIiwibmV3UHJvcHMiLCJhZGRpdGlvbmFsUHJvcHMiLCJpc1N0YXRlbGVzcyIsImhvaXN0U3RhdGljcyIsIndyYXBwZWRDb21wb25lbnQiLCJncmFiU3RvcmVzQnlOYW1l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
